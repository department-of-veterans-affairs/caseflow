<% content_for :full_page_content do %>
  <%= react_component(FeatureToggle.enabled?(:interface_version_2, user: current_user) ? "Router" : "BaseContainer" , props: {
    appName: "Queue",
    defaultUrl: "/queue",
    userDisplayName: current_user.display_name,
    dropdownUrls: dropdown_urls,
    applicationUrls: application_urls,
    page: "DecisionReviewer",
    feedbackUrl: feedback_url,
    efolderExpressUrl: efolder_express_url,
    userHasEfolderRole: current_user.can?('Download eFolder'),
    featureToggles: {
      interfaceVersion2: FeatureToggle.enabled?(:interface_version_2, user: current_user),
      windowSlider: FeatureToggle.enabled?(:window_slider, user: current_user),
      readerSelectorsMemoized: FeatureToggle.enabled?(:bulk_upload_documents, user: current_user),
      readerGetDocumentLogging: FeatureToggle.enabled?(:reader_get_document_logging, user: current_user),
      prefetchDisabled: FeatureToggle.enabled?(:prefetch_disabled, user: current_user),
      metricsLogRestError: FeatureToggle.enabled?(:metrics_log_rest_error, user: current_user),
      metricsBrowserError: FeatureToggle.enabled?(:metrics_browser_error, user: current_user),
      metricsLoadScreen: FeatureToggle.enabled?(:metrics_load_screen, user: current_user),
      metricsRecordPDFJSGetDocument: FeatureToggle.enabled?(:metrics_get_pdfjs_doc, user: current_user),
      metricsReaderRenderText: FeatureToggle.enabled?(:metrics_reader_render_text, user: current_user),
      metricsLogRestSuccess: FeatureToggle.enabled?(:metrics_log_rest_success, user: current_user),
      metricsPdfStorePages: FeatureToggle.enabled?(:metrics_pdf_store_pages, user: current_user),
      auto_tagging_ability: FeatureToggle.enabled?(:auto_tagging_ability, user: current_user)
    },
    buildDate: build_date
  }) %>
<% end %>

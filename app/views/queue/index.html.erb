<% content_for :full_page_content do %>
  <%= react_component("Queue", props: {
    userDisplayName: current_user.display_name,
    userId: current_user.id,
    userRole: (current_user.vacols_roles.first || "").capitalize,
    userCssId: current_user.css_id,
    organizations: current_user.selectable_organizations.map {|o| o.slice(:name, :url)},
    userIsVsoEmployee: current_user.vso_employee?,
    userIsCamoEmployee: current_user.camo_employee?,
    canEditAod: AodTeam.singleton.user_has_access?(current_user),
    caseSearchHomePage: case_search_home_page,
    dropdownUrls: dropdown_urls,
    applicationUrls: application_urls,
    feedbackUrl: feedback_url,
    flash: flash,
    buildDate: build_date,
    hasCaseDetailsRole: current_user.roles.include?('Case Details'),
    userCanEditUnrecognizedPOA: current_user.can_edit_unrecognized_poa?,
    userCanAssignHearingSchedule: current_user.can_assign_hearing_schedule?,
    userCanViewHearingSchedule: current_user.can_view_hearing_schedule?,
    userCanViewOvertimeStatus: current_user.can_view_overtime_status?,
    userCanViewEditNodDate: current_user.can_view_edit_nod_date?,
    canEditCavcRemands: current_user.can_edit_cavc_remands?,
    canEditCavcDashboards: current_user.can_edit_cavc_dashboards?,
    canViewCavcDashboards: current_user.can_view_cavc_dashboards?,
    userIsCobAdmin: ClerkOfTheBoard.singleton.admins.include?(current_user),
    featureToggles: {
      collect_video_and_central_emails: FeatureToggle.enabled?(:collect_video_and_central_emails, user: current_user),
      enable_hearing_time_slots: FeatureToggle.enabled?(:enable_hearing_time_slots, user: current_user),
      schedule_veteran_virtual_hearing: FeatureToggle.enabled?(:schedule_veteran_virtual_hearing, user: current_user),
      overtime_revamp: FeatureToggle.enabled?(:overtime_revamp, user: current_user),
      overtime_persistence: FeatureToggle.enabled?(:overtime_persistence, user: current_user),
      mdr_cavc_remand: FeatureToggle.enabled?(:mdr_cavc_remand, user: current_user),
      reversal_cavc_remand: FeatureToggle.enabled?(:reversal_cavc_remand, user: current_user),
      dismissal_cavc_remand: FeatureToggle.enabled?(:dismissal_cavc_remand, user: current_user),
      editNodDate: FeatureToggle.enabled?(:edit_nod_date, user: current_user),
      fnod_badge: FeatureToggle.enabled?(:fnod_badge, user: current_user),
      fnod_banner: FeatureToggle.enabled?(:fnod_banner, user: current_user),
      view_nod_date_updates: FeatureToggle.enabled?(:view_nod_date_updates, user: current_user),
      poa_button_refresh: FeatureToggle.enabled?(:poa_button_refresh, user: current_user),
      poa_auto_refresh: FeatureToggle.enabled?(:poa_auto_refresh, user: current_user),
      poa_auto_ihp_update: FeatureToggle.enabled?(:poa_auto_ihp_update, user: current_user),
      edit_unrecognized_appellant: FeatureToggle.enabled?(:edit_unrecognized_appellant, user: current_user),
      edit_unrecognized_appellant_poa: FeatureToggle.enabled?(:edit_unrecognized_appellant_poa, user: current_user),
      listed_granted_substitution_before_dismissal: FeatureToggle.enabled?(:listed_granted_substitution_before_dismissal, user: current_user),
      restrict_poa_visibility: FeatureToggle.enabled?(:restrict_poa_visibility, user: current_user),
      vha_predocket_workflow: FeatureToggle.enabled?(:vha_predocket_workflow, user: current_user),
      vha_irregular_appeals: FeatureToggle.enabled?(:vha_irregular_appeals, user: current_user),
      vso_virtual_opt_in: FeatureToggle.enabled?(:vso_virtual_opt_in, user: current_user),
      das_case_timeliness: FeatureToggle.enabled?(:das_case_timeliness, user: current_user),
      das_case_timeline: FeatureToggle.enabled?(:das_case_timeline, user: current_user),
      split_appeal_workflow: FeatureToggle.enabled?(:split_appeal_workflow, user: current_user),
      cavc_remand_granted_substitute_appellant: FeatureToggle.enabled?(:cavc_remand_granted_substitute_appellant, user: current_user),
      cavc_dashboard_workflow: FeatureToggle.enabled?(:cavc_dashboard_workflow, user: current_user),
      cc_appeal_workflow: FeatureToggle.enabled?(:cc_appeal_workflow, user: current_user),
      cc_vacatur_visibility: FeatureToggle.enabled?(:cc_vacatur_visibility, user: current_user),
      vlj_legacy_appeal: FeatureToggle.enabled?(:vlj_legacy_appeal, user: current_user),
      legacy_das_deprecation: FeatureToggle.enabled?(:legacy_das_deprecation, user: current_user),
      additional_remand_reasons: FeatureToggle.enabled?(:additional_remand_reasons, user: current_user)
    }
  }) %>
<% end %>

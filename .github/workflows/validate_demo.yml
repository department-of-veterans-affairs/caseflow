name: Validate Demo

on:
  workflow_dispatch:
  push:
    branches: f-gh-migration

jobs:
  validate-demo:
    runs-on: ubuntu-8-cores-latest
    strategy:
      fail-fast: false
      matrix:
        ci_node_total: [12]
        ci_node_index: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]
    services:
      postgres:
        image: postgres:11.7
        env:
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
          POSTGRES_DB: caseflow_certification_test
        ports:
        - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      redis:
        image: redis:4.0.10
        ports:
        - 6379:6379
        options: --entrypoint redis-server
      facols_db:
        image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/facols:latest
        credentials:
          username: AWS
          password: ${{ secrets.ECR_PASSWORD }}
        ports:
        - 1521:1521
    container:
      image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/gaimg-ruby:2.7.3-ga-browsers
      credentials:
        username: AWS
        password: ${{ secrets.ECR_PASSWORD }}
      env:
          DBUS_SESSION_BUS_ADDRESS: /dev/null
          RAILS_ENV: test
          NODE_ENV: test
          BUNDLE_PATH: vendor/bundle
          COVERAGE_DIR: /home/circleci/coverage
          POSTGRES_HOST: postgres
          POSTGRES_USER: root
          POSTGRES_PASSWORD: password
          REDIS_URL_CACHE: "redis://redis:6379/0/cache/"
    steps:
      - uses: actions/checkout@v3
      
      - name: Install redis-server
        run: |
          apt-get update
          apt-install -y redis-server
      
      - name: restore yarn cache
        uses: actions/cache/restore@v3
        with:
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}
          path: |
            ~/.cache/yarn
            public/assets
            tmp/cache/assets/sprockets
          restore-keys:
            dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}

      - name: Install Node Dependencies
        run: ./ci-bin/capture-log "cd client && yarn install --frozen-lockfile"

      - name: Save Cache
        uses: actions/cache@v3
        with:
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}
          path: |
            ~/.cache/yarn
            public/assets
            tmp/cache/assets/sprockets
          restore-keys:
            dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}

      - name: Install chromium
        run: |
          CHROME_VERSION="106.0.5249.119-1"
          apt-get update
          wget --no-verbose -O /tmp/chrome.deb https://dl.google.com/linux/chrome/deb/pool/main/g/google-chrome-stable/google-chrome-stable_${CHROME_VERSION}_amd64.deb \
          && apt install -y /tmp/chrome.deb \
          && rm /tmp/chrome.deb

      - name: Install firefox
        run: |
          FIREFOX_VERSION="106.0.1"
          apt-get -y install libgtk2.0-0
          wget https://ftp.mozilla.org/pub/firefox/releases/${FIREFOX_VERSION}/linux-x86_64/en-GB/firefox-${FIREFOX_VERSION}.tar.bz2
          tar xvf firefox-${FIREFOX_VERSION}.tar.bz2
          mv firefox/ /usr/lib/firefox
          ln -s /usr/lib/firefox /usr/bin/firefox

      - name: setup testfiles directory
        run: ./ci-bin/capture-log "mkdir -p ~/project/tmp/testfiles"

  
      - name: Install Ruby Dependencies
        run: |
          ruby -v
          BASH_ENV="Bash"
          echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> "$BASH_ENV"
          export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")
          gem install bundler
          bundle install --path vendor/bundle

      - name: Install Dockerize
        run: |
          DOCKERIZE_VERSION="v0.6.1"
          wget https://github.com/jwilder/dockerize/releases/download/${DOCKERIZE_VERSION}/dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz \
          && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz \
          && rm dockerize-linux-amd64-${DOCKERIZE_VERSION}.tar.gz

      - name: "Wait for database"
        run: dockerize -wait tcp://postgres:5432 -timeout 1m

      - name: "Wait for FACOLS"
        run: ./ci-bin/capture-log "bundle exec rake local:vacols:wait_for_connection"

      - name: Database setup
        run: |
          ./ci-bin/capture-log "DB=etl bundle exec rake db:create db:schema:load db:migrate"
          ./ci-bin/capture-log "bundle exec rake db:create db:schema:load db:migrate"

      - name: make seed-dbs
        run: |
          ./ci-bin/capture-log "make -f Makefile.example seed-dbs"

      - name: Assets Precompile
        run: |
          ./ci-bin/capture-log "bundle exec rake assets:precompile"

      - name: RSpec via knapsack_pro Queue Mode
        env:
          POSTGRES_HOST: postgres
          KNAPSACK_PRO_RSPEC_SPLIT_BY_TEST_EXAMPLES: true
          KNAPSACK_PRO_TEST_SUITE_GH_TOKEN_RSPEC: ${{ secrets.KNAPSACK_PRO_TEST_SUITE_GH_TOKEN_RSPEC }}
          KNAPSACK_PRO_CI_NODE_TOTAL: ${{ matrix.ci_node_total }}
          KNAPSACK_PRO_CI_NODE_INDEX: ${{ matrix.ci_node_index }}
          KNAPSACK_PRO_LOG_LEVEL: info
          REDIS_URL_CACHE: "redis://redis:6379/0/cache/"
        run: |
          mkdir -p ./test-results/rspec
          export RAILS_ENV=test
          make -f Makefile.example test | tee ./test-results/rspec/rspec.out
          Testing without knapsack
          bundle exec rake "knapsack_pro:queue:rspec[--format documentation --no-color --format RspecJunitFormatter --out tmp/rspec.xml]"

      - uses: actions/upload-artifact@v3
        with:
          path: ./test-results

      - uses: actions/upload-artifact@v3
        with:
          path: ./test-results

      - uses: actions/upload-artifact@v3
        with:
          path: ./coverage

      - uses: actions/upload-artifact@v3
        with:
          path: ./project/tmp/capybara

      - uses: actions/upload-artifact@v3
        with:
          path: ./project/log/test.log

      - uses: actions/upload-artifact@v3
        with:
          path: ./project/log/bullet.log

      - uses: actions/upload-artifact@v3
        with:
          path: ./logs

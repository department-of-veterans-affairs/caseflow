# frozen_string_literal: true

##
#

module JailerPolymorphicAssociations
  # maps _type attributes to specific classes for the type
  def polymorphic_types_hash
    @polymorphic_types_hash ||= {
      "appeal_type" => [Appeal, LegacyAppeal],
      "RecordSyncedByJob.record_type" => [Appeal, LegacyAppeal],
      "decision_review_type" => [Appeal, SupplementalClaim, HigherLevelReview],
      "review_type" => [Appeal, SupplementalClaim, HigherLevelReview],
      "SupplementalClaim.decision_review_remanded_type" => [Appeal, SupplementalClaim, HigherLevelReview],
      "Intake.detail_type" => [Appeal, SupplementalClaim, HigherLevelReview, RampElection, RampRefiling],
      "Message.detail_type" => [SupplementalClaim, HigherLevelReview],
      "EndProductEstablishment.source_type" =>
        [DecisionDocument, SupplementalClaim, HigherLevelReview, RampElection, RampRefiling],
      "EndProductUpdate.original_decision_review_type" => [SupplementalClaim, HigherLevelReview],
      "JobNote.job_type" => [SupplementalClaim, HigherLevelReview],
      "hearing_type" => [Hearing, LegacyHearing],
      "assigned_to_type" => [User, Organization],
      "CaseflowStuckRecord.stuck_record_type" => [PriorityEndProductSyncQueue],
      "VbmsCommunicationPackage.document_mailable_via_pacman_type" => [DecisionDocument, VbmsUploadedDocument]
    }.freeze
  end

  def polymorphic_types(klass, assoc)
    polymorphic_types_hash["#{klass.name}.#{assoc.foreign_type}"] || polymorphic_types_hash[assoc.foreign_type]
  end

  # :reek:UtilityFunction
  def jailer_record_classes(base_class)
    if base_class == "CaseflowRecord"
      base_class.descendants - [CaseflowRecord] - Task.descendants
    elsif base_class == "ETL::Record"
      base_class.descendants - [ETL::Record]
    elsif base_class == "VACOLS::Record"
      base_class.descendants - [VACOLS::Record]
    else
      base_class.descendants
    end
  end

  # :reek:FeatureEnvy
  def jailer_assocs_hash(base_class)
    jailer_assocs_hash = {}
    jailer_record_classes(base_class).each do |klass|
      polymorphic_assocs = AssocationWrapper.new(klass).belongs_to.polymorphic.select_associations
      # Skip if there are no polymorphic_associations or the table has already been processed
      next if polymorphic_assocs.blank? || jailer_assocs_hash.key?(klass.table_name)

      jailer_assocs_hash[klass.table_name] = polymorphic_assocs.flat_map do |assoc|
        polymorphic_types = polymorphic_types(klass, assoc)
        fail "Unknown #{klass.name}.#{assoc.foreign_type} -- add to polymorphic_types_hash." unless polymorphic_types

        to_csv_columns(klass, assoc)
      end.compact
    end
    jailer_assocs_hash
  end

  # :reek:FeatureEnvy
  def to_csv_columns(klass, assoc)
    polymorphic_types(klass, assoc).map do |specific_assoc_class|
      [klass.table_name,
       specific_assoc_class.table_name,
       "",
       cardinality(specific_assoc_class, klass),
       "A.#{assoc.foreign_key}=B.#{assoc.association_primary_key(specific_assoc_class)} " \
         "AND A.#{assoc.foreign_type}='#{specific_assoc_class.name}'",
       "#{klass.table_name} belongs_to #{specific_assoc_class.name}",
       "Autogenerated by 'rake doc:belongs_to:jailer_polymorphic_associations'"]
    end
  end

  # :reek:UtilityFunction
  def cardinality(specific_assoc_class, klass)
    if specific_assoc_class.reflect_on_association(klass.table_name.to_sym) # has_many association
      "1:n"
    elsif specific_assoc_class.reflect_on_association(klass.table_name.singularize.to_sym) # has_one association
      "1:1"
    else
      "n:m"
    end
  end
end

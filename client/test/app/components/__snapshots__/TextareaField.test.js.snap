// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TextareaField Can accept input 1`] = `
<TextareaField
  disabled={false}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={false}
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={false}
      >
        <span>
          Test Field
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

exports[`TextareaField Displays a bold label when strongLabel prop is true 1`] = `
<TextareaField
  disabled={false}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={false}
  strongLabel={true}
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <strong>
        <FormLabel
          name="Test Field"
          optional={false}
          required={false}
        >
          <span>
            Test Field
          </span>
        </FormLabel>
      </strong>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

exports[`TextareaField Displays character count when maxlength and value are present 1`] = `
<TextareaField
  disabled={false}
  maxlength={10}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={false}
  value="hello"
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={false}
      >
        <span>
          Test Field
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      maxLength={10}
      name="Test Field"
      onChange={[Function]}
      value="hello"
    />
    <p>
      <i>
        5
         
        characters
         
        left
      </i>
    </p>
  </div>
</TextareaField>
`;

exports[`TextareaField Displays error message when present 1`] = `
<TextareaField
  disabled={false}
  errorMessage="Something went wrong"
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={false}
>
  <div
    className="cf-form-textarea usa-input-error"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={false}
      >
        <span>
          Test Field
        </span>
      </FormLabel>
    </label>
    <span
      className="usa-input-error-message"
    >
      Something went wrong
    </span>
    <textarea
      disabled={false}
      id="Test Field"
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

exports[`TextareaField Displays screen-reader only label when hideLabel prop is true 1`] = `
<TextareaField
  disabled={false}
  hideLabel={true}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={false}
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="sr-only question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={false}
      >
        <span>
          Test Field
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

exports[`TextareaField Does not display character count when maxlength is present, but value is not present 1`] = `
<TextareaField
  disabled={false}
  maxlength={10}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={false}
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={false}
      >
        <span>
          Test Field
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      maxLength={10}
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

exports[`TextareaField Emojis consume 2 characters 1`] = `
<TextareaField
  disabled={false}
  maxlength={2}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={false}
  value="ðŸ˜€"
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={false}
      >
        <span>
          Test Field
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      maxLength={2}
      name="Test Field"
      onChange={[Function]}
      value="ðŸ˜€"
    />
    <p>
      <i>
        0
         
        characters
         
        left
      </i>
    </p>
  </div>
</TextareaField>
`;

exports[`TextareaField Matches snapshot with default props 1`] = `
<TextareaField
  disabled={false}
  name="Test Field"
  onChange={[MockFunction]}
  optional={false}
  required={false}
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={false}
      >
        <span>
          Test Field
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

exports[`TextareaField Respects disabled prop on the textarea field 1`] = `
<TextareaField
  disabled={true}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={false}
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={false}
      >
        <span>
          Test Field
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={true}
      id="Test Field"
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

exports[`TextareaField Respects optional prop on the textarea field 1`] = `
<TextareaField
  disabled={false}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={true}
  required={false}
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={true}
        required={false}
      >
        <span>
          Test Field
          <span
            className="cf-optional"
          >
            Optional
          </span>
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

exports[`TextareaField Respects required prop on the textarea field 1`] = `
<TextareaField
  disabled={false}
  name="Test Field"
  onChange={
    [MockFunction] {
      "calls": Array [
        Array [
          "hello",
        ],
      ],
      "results": Array [
        Object {
          "type": "return",
          "value": undefined,
        },
      ],
    }
  }
  optional={false}
  required={true}
>
  <div
    className="cf-form-textarea"
  >
    <label
      className="question-label"
      htmlFor="Test Field"
    >
      <FormLabel
        name="Test Field"
        optional={false}
        required={true}
      >
        <span>
          Test Field
          <span
            className="cf-required"
          >
            Required
          </span>
        </span>
      </FormLabel>
    </label>
    <textarea
      disabled={false}
      id="Test Field"
      name="Test Field"
      onChange={[Function]}
    />
  </div>
</TextareaField>
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`DetailsForm Matches snapshot if user does not have the enable virtual hearings feature flag enabled 1`] = `
<DetailsForm>
  <ContentSection
    header="Hearing Details"
  >
    <div
      className="cf-app-segment"
    >
      <h2
        data-css-3rhuy2=""
      >
        Hearing Details
      </h2>
      <div
        data-css-1571z6o=""
      >
        <div
          data-css-1fmltfu=""
        >
          <Connect(JudgeDropdown)
            name="judgeDropdown"
            onChange={[Function]}
          >
            <JudgeDropdown
              judges={Object {}}
              label="VLJ"
              name="judgeDropdown"
              onChange={[Function]}
              onFetchDropdownData={[Function]}
              onReceiveDropdownData={[Function]}
            >
              <SearchableDropdown
                label="VLJ"
                loading={false}
                name="judgeDropdown"
                onChange={[Function]}
                strongLabel={true}
                value={
                  Object {
                    "label": null,
                    "value": null,
                  }
                }
              >
                <div
                  className="cf-form-dropdown dropdown-judgeDropdown"
                >
                  <label
                    className="question-label"
                    htmlFor="judgeDropdown"
                  >
                    <strong>
                      <span>
                        VLJ
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "judgeDropdown",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText=""
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      value={
                        Object {
                          "label": null,
                          "value": null,
                        }
                      }
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable has-value"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-18--value"
                          >
                            <Value
                              disabled={false}
                              id="react-select-18--value-item"
                              instancePrefix="react-select-18-"
                              onClick={null}
                              value={
                                Object {
                                  "label": null,
                                  "value": null,
                                }
                              }
                            >
                              <div
                                className="Select-value"
                              >
                                <span
                                  aria-selected="true"
                                  className="Select-value-label"
                                  id="react-select-18--value-item"
                                  role="option"
                                />
                              </div>
                            </Value>
                            <Component
                              aria-activedescendant="react-select-18--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="judgeDropdown"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-18--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="judgeDropdown"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
            </JudgeDropdown>
          </Connect(JudgeDropdown)>
          <Connect(HearingCoordinatorDropdown)
            name="hearingCoordinatorDropdown"
            onChange={[Function]}
          >
            <HearingCoordinatorDropdown
              hearingCoordinators={
                Object {
                  "isFetching": false,
                  "options": Array [],
                }
              }
              label="Hearing Coordinator"
              name="hearingCoordinatorDropdown"
              onChange={[Function]}
              onFetchDropdownData={[Function]}
              onReceiveDropdownData={[Function]}
            >
              <SearchableDropdown
                label="Hearing Coordinator"
                loading={false}
                name="hearingCoordinatorDropdown"
                onChange={[Function]}
                options={Array []}
                strongLabel={true}
                value={
                  Object {
                    "label": null,
                    "value": null,
                  }
                }
              >
                <div
                  className="cf-form-dropdown dropdown-hearingCoordinatorDropdown"
                >
                  <label
                    className="question-label"
                    htmlFor="hearingCoordinatorDropdown"
                  >
                    <strong>
                      <span>
                        Hearing Coordinator
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "hearingCoordinatorDropdown",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText=""
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={Array []}
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      value={
                        Object {
                          "label": null,
                          "value": null,
                        }
                      }
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable has-value"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-19--value"
                          >
                            <Value
                              disabled={false}
                              id="react-select-19--value-item"
                              instancePrefix="react-select-19-"
                              onClick={null}
                              value={
                                Object {
                                  "label": null,
                                  "value": null,
                                }
                              }
                            >
                              <div
                                className="Select-value"
                              >
                                <span
                                  aria-selected="true"
                                  className="Select-value-label"
                                  id="react-select-19--value-item"
                                  role="option"
                                />
                              </div>
                            </Value>
                            <Component
                              aria-activedescendant="react-select-19--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="hearingCoordinatorDropdown"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-19--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="hearingCoordinatorDropdown"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
            </HearingCoordinatorDropdown>
          </Connect(HearingCoordinatorDropdown)>
          <HearingRoomDropdown
            label="Hearing Room"
            name="hearingRoomDropdown"
            onChange={[Function]}
          >
            <SearchableDropdown
              label="Hearing Room"
              loading={false}
              name="hearingRoomDropdown"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": "None",
                    "value": null,
                  },
                  Object {
                    "label": "1 (1W200A)",
                    "value": "1",
                  },
                  Object {
                    "label": "2 (1W200B)",
                    "value": "2",
                  },
                  Object {
                    "label": "3 (1W200C)",
                    "value": "3",
                  },
                  Object {
                    "label": "4 (1W424)",
                    "value": "4",
                  },
                  Object {
                    "label": "5 (1W428)",
                    "value": "5",
                  },
                  Object {
                    "label": "6 (1W432)",
                    "value": "6",
                  },
                  Object {
                    "label": "7 (1W434)",
                    "value": "7",
                  },
                  Object {
                    "label": "8 (1W435)",
                    "value": "8",
                  },
                  Object {
                    "label": "9 (1W436)",
                    "value": "9",
                  },
                  Object {
                    "label": "10 (1W437)",
                    "value": "10",
                  },
                  Object {
                    "label": "11 (1W438)",
                    "value": "11",
                  },
                  Object {
                    "label": "12 (1W439)",
                    "value": "12",
                  },
                  Object {
                    "label": "13 (1W440)",
                    "value": "13",
                  },
                ]
              }
              strongLabel={true}
              value={
                Object {
                  "label": null,
                  "value": null,
                }
              }
            >
              <div
                className="cf-form-dropdown dropdown-hearingRoomDropdown"
              >
                <label
                  className="question-label"
                  htmlFor="hearingRoomDropdown"
                >
                  <strong>
                    <span>
                      Hearing Room
                    </span>
                  </strong>
                </label>
                <div
                  className=""
                >
                  <Select
                    addLabelText="Add \\"{label}\\"?"
                    arrowRenderer={[Function]}
                    autosize={true}
                    backspaceRemoves={true}
                    backspaceToRemoveMessage="Press backspace to remove {label}"
                    cache={false}
                    clearAllText="Clear all"
                    clearRenderer={[Function]}
                    clearValueText="Clear value"
                    clearable={false}
                    deleteRemoves={true}
                    delimiter=","
                    disabled={false}
                    escapeClearsValue={true}
                    filterOptions={[Function]}
                    ignoreAccents={true}
                    ignoreCase={true}
                    inputProps={
                      Object {
                        "autoComplete": "off",
                        "id": "hearingRoomDropdown",
                      }
                    }
                    isLoading={false}
                    joinValues={false}
                    labelKey="label"
                    matchPos="any"
                    matchProp="any"
                    menuBuffer={0}
                    menuRenderer={[Function]}
                    multi={false}
                    noResultsText="Not an option"
                    onBlurResetsInput={false}
                    onChange={[Function]}
                    onCloseResetsInput={true}
                    optionComponent={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "None",
                          "value": null,
                        },
                        Object {
                          "label": "1 (1W200A)",
                          "value": "1",
                        },
                        Object {
                          "label": "2 (1W200B)",
                          "value": "2",
                        },
                        Object {
                          "label": "3 (1W200C)",
                          "value": "3",
                        },
                        Object {
                          "label": "4 (1W424)",
                          "value": "4",
                        },
                        Object {
                          "label": "5 (1W428)",
                          "value": "5",
                        },
                        Object {
                          "label": "6 (1W432)",
                          "value": "6",
                        },
                        Object {
                          "label": "7 (1W434)",
                          "value": "7",
                        },
                        Object {
                          "label": "8 (1W435)",
                          "value": "8",
                        },
                        Object {
                          "label": "9 (1W436)",
                          "value": "9",
                        },
                        Object {
                          "label": "10 (1W437)",
                          "value": "10",
                        },
                        Object {
                          "label": "11 (1W438)",
                          "value": "11",
                        },
                        Object {
                          "label": "12 (1W439)",
                          "value": "12",
                        },
                        Object {
                          "label": "13 (1W440)",
                          "value": "13",
                        },
                      ]
                    }
                    pageSize={5}
                    placeholder="Select..."
                    required={false}
                    scrollMenuIntoView={true}
                    searchable={true}
                    shouldKeyDownEventCreateNewOption={[Function]}
                    simpleValue={false}
                    tabSelectsValue={true}
                    value={
                      Object {
                        "label": null,
                        "value": null,
                      }
                    }
                    valueComponent={[Function]}
                    valueKey="value"
                  >
                    <div
                      className="Select Select--single is-searchable has-value"
                    >
                      <div
                        className="Select-control"
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="Select-multi-value-wrapper"
                          id="react-select-20--value"
                        >
                          <Value
                            disabled={false}
                            id="react-select-20--value-item"
                            instancePrefix="react-select-20-"
                            onClick={null}
                            value={
                              Object {
                                "label": null,
                                "value": null,
                              }
                            }
                          >
                            <div
                              className="Select-value"
                            >
                              <span
                                aria-selected="true"
                                className="Select-value-label"
                                id="react-select-20--value-item"
                                role="option"
                              />
                            </div>
                          </Value>
                          <Component
                            aria-activedescendant="react-select-20--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            autoComplete="off"
                            className="Select-input"
                            id="hearingRoomDropdown"
                            minWidth="5"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            value=""
                          >
                            <div
                              className="Select-input"
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <style
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "input#undefined::-ms-clear {display: none;}",
                                  }
                                }
                              />
                              <input
                                aria-activedescendant="react-select-20--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                autoComplete="off"
                                id="hearingRoomDropdown"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                style={
                                  Object {
                                    "boxSizing": "content-box",
                                    "width": "5px",
                                  }
                                }
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </Component>
                        </span>
                        <span
                          className="Select-arrow-zone"
                          onMouseDown={[Function]}
                        >
                          <span
                            className="Select-arrow"
                            onMouseDown={[Function]}
                          />
                        </span>
                      </div>
                    </div>
                  </Select>
                </div>
              </div>
            </SearchableDropdown>
          </HearingRoomDropdown>
        </div>
        <div
          data-css-1fmltfu=""
        >
          <div>
            <strong>
              Waive 90 Day Evidence Hold
            </strong>
            <Checkbox
              label="Yes, Waive 90 Day Evidence Hold"
              name="evidenceWindowWaived"
              onChange={[Function]}
              required={false}
              value={false}
            >
              <div
                className="checkbox-wrapper-evidenceWindowWaived cf-form-checkboxes"
              >
                <div
                  className="cf-form-checkbox"
                >
                  <input
                    aria-label="evidenceWindowWaived"
                    checked={false}
                    id="evidenceWindowWaived"
                    name="evidenceWindowWaived"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <label
                    htmlFor="evidenceWindowWaived"
                  >
                    <span
                      className=""
                    >
                      Yes, Waive 90 Day Evidence Hold
                    </span>
                     
                  </label>
                </div>
              </div>
            </Checkbox>
          </div>
          <div />
        </div>
        <div>
          <TextareaField
            disabled={false}
            name="Notes"
            onChange={[Function]}
            optional={false}
            required={false}
            strongLabel={true}
            styling={
              Object {
                "data-css-d0z96": "",
              }
            }
            value=""
          >
            <div
              className="cf-form-textarea"
              data-css-d0z96=""
            >
              <label
                className="question-label"
                htmlFor="Notes"
              >
                <strong>
                  <span>
                    Notes
                  </span>
                </strong>
              </label>
              <textarea
                disabled={false}
                id="Notes"
                name="Notes"
                onChange={[Function]}
                value=""
              />
            </div>
          </TextareaField>
        </div>
      </div>
    </div>
  </ContentSection>
  <VirtualHearingForm
    dispatch={[MockFunction]}
  />
  <TranscriptionFormSection
    dispatch={[MockFunction]}
  >
    <ContentSection
      header="Transcription Details"
    >
      <div
        className="cf-app-segment"
      >
        <h2
          data-css-3rhuy2=""
        >
          Transcription Details
        </h2>
        <div
          data-css-1571z6o=""
        >
          <TranscriptionDetailsInputs
            title="Transcription Details"
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <TextField
                className={
                  Array [
                    "cf-form-textinput",
                  ]
                }
                label="Task #"
                name="taskNumber"
                onChange={[Function]}
                optional={false}
                required={false}
                strongLabel={true}
                type="text"
                useAriaLabel={false}
              >
                <div
                  className="cf-form-textinput   "
                >
                  <label
                    htmlFor="taskNumber"
                  >
                    <strong>
                      <span>
                        Task #
                      </span>
                    </strong>
                  </label>
                  <input
                    className={
                      Array [
                        "cf-form-textinput",
                      ]
                    }
                    id="taskNumber"
                    name="taskNumber"
                    onChange={[Function]}
                    type="text"
                    value=""
                  />
                </div>
              </TextField>
              <SearchableDropdown
                label="Transcriber"
                loading={false}
                name="transcriber"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "",
                      "value": null,
                    },
                    Object {
                      "label": "Genesis Government Solutions, Inc.",
                      "value": "Genesis Government Solutions, Inc.",
                    },
                    Object {
                      "label": "Jamison Professional Services",
                      "value": "Jamison Professional Services",
                    },
                    Object {
                      "label": "The Ravens Group, Inc.",
                      "value": "The Ravens Group, Inc.",
                    },
                  ]
                }
                strongLabel={true}
              >
                <div
                  className="cf-form-dropdown dropdown-transcriber"
                >
                  <label
                    className="question-label"
                    htmlFor="transcriber"
                  >
                    <strong>
                      <span>
                        Transcriber
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "transcriber",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText="Not an option"
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "",
                            "value": null,
                          },
                          Object {
                            "label": "Genesis Government Solutions, Inc.",
                            "value": "Genesis Government Solutions, Inc.",
                          },
                          Object {
                            "label": "Jamison Professional Services",
                            "value": "Jamison Professional Services",
                          },
                          Object {
                            "label": "The Ravens Group, Inc.",
                            "value": "The Ravens Group, Inc.",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-21--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <Component
                              aria-activedescendant="react-select-21--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="transcriber"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-21--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="transcriber"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
              <div />
            </div>
            <div
              data-css-1fmltfu=""
            >
              <DateSelector
                label="Sent to Transcriber"
                name="sentToTranscriberDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Sent to Transcriber"
                  max="9999-12-31"
                  name="sentToTranscriberDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="sentToTranscriberDate"
                    >
                      <strong>
                        <span>
                          Sent to Transcriber
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="sentToTranscriberDate"
                      max="9999-12-31"
                      name="sentToTranscriberDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <DateSelector
                label="Expected Return Date"
                name="expectedReturnDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Expected Return Date"
                  max="9999-12-31"
                  name="expectedReturnDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="expectedReturnDate"
                    >
                      <strong>
                        <span>
                          Expected Return Date
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="expectedReturnDate"
                      max="9999-12-31"
                      name="expectedReturnDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <DateSelector
                label="Transcript Uploaded to VBMS"
                name="uploadedToVbmsDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Transcript Uploaded to VBMS"
                  max="9999-12-31"
                  name="uploadedToVbmsDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="uploadedToVbmsDate"
                    >
                      <strong>
                        <span>
                          Transcript Uploaded to VBMS
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="uploadedToVbmsDate"
                      max="9999-12-31"
                      name="uploadedToVbmsDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
            </div>
          </TranscriptionDetailsInputs>
          <div
            className="cf-help-divider"
          />
          <h3>
            Transcription Problem
          </h3>
          <TranscriptionProblemInputs
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <SearchableDropdown
                label="Transcription Problem Type"
                loading={false}
                name="problemType"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "No audio",
                      "value": "No audio",
                    },
                    Object {
                      "label": "Poor Audio Quality",
                      "value": "Poor Audio Quality",
                    },
                    Object {
                      "label": "Incomplete Hearing",
                      "value": "Incomplete Hearing",
                    },
                    Object {
                      "label": "Other (see notes)",
                      "value": "Other (see notes)",
                    },
                    Object {
                      "label": "None",
                      "value": null,
                    },
                  ]
                }
                strongLabel={true}
              >
                <div
                  className="cf-form-dropdown dropdown-problemType"
                >
                  <label
                    className="question-label"
                    htmlFor="problemType"
                  >
                    <strong>
                      <span>
                        Transcription Problem Type
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "problemType",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText="Not an option"
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "No audio",
                            "value": "No audio",
                          },
                          Object {
                            "label": "Poor Audio Quality",
                            "value": "Poor Audio Quality",
                          },
                          Object {
                            "label": "Incomplete Hearing",
                            "value": "Incomplete Hearing",
                          },
                          Object {
                            "label": "Other (see notes)",
                            "value": "Other (see notes)",
                          },
                          Object {
                            "label": "None",
                            "value": null,
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-22--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <Component
                              aria-activedescendant="react-select-22--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="problemType"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-22--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="problemType"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
              <DateSelector
                label="Problem Notice Sent"
                name="problemNoticeSentDate"
                onChange={[Function]}
                readOnly={true}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Problem Notice Sent"
                  max="9999-12-31"
                  name="problemNoticeSentDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  readOnly={true}
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="problemNoticeSentDate"
                    >
                      <strong>
                        <span>
                          Problem Notice Sent
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="problemNoticeSentDate"
                      max="9999-12-31"
                      name="problemNoticeSentDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      readOnly={true}
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <RadioField
                className={
                  Array [
                    "usa-fieldset-inputs",
                  ]
                }
                label="Requested Remedy"
                name="requestedRemedy"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "disabled": true,
                      "displayText": "Proceed without transcript",
                      "value": "Proceed without transcript",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "Proceed with partial transcript",
                      "value": "Proceed with partial transcript",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "New hearing",
                      "value": "New hearing",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "None",
                      "value": "",
                    },
                  ]
                }
                required={false}
                strongLabel={true}
                value=""
              >
                <fieldset
                  className="usa-fieldset-inputs cf-form-radio "
                >
                  <legend
                    className=""
                  >
                    <strong>
                      <span>
                        Requested Remedy
                         
                      </span>
                    </strong>
                  </legend>
                  <div
                    className="cf-form-radio-options"
                  >
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-Proceed without transcript-0"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_Proceed without transcript"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="Proceed without transcript"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_Proceed without transcript"
                      >
                        Proceed without transcript
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-Proceed with partial transcript-1"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_Proceed with partial transcript"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="Proceed with partial transcript"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_Proceed with partial transcript"
                      >
                        Proceed with partial transcript
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-New hearing-2"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_New hearing"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="New hearing"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_New hearing"
                      >
                        New hearing
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy--3"
                    >
                      <input
                        checked={true}
                        disabled={true}
                        id="requestedRemedy_"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value=""
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_"
                      >
                        None
                      </label>
                    </div>
                  </div>
                </fieldset>
              </RadioField>
            </div>
          </TranscriptionProblemInputs>
          <div
            className="cf-help-divider"
          />
          <h3>
            Transcription Request
          </h3>
          <TranscriptionRequestInputs
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <div>
                <strong>
                  Copy Requested by Appellant/Rep
                </strong>
                <Checkbox
                  label="Yes, Transcript Requested"
                  name="copyRequested"
                  onChange={[Function]}
                  required={false}
                  value={false}
                >
                  <div
                    className="checkbox-wrapper-copyRequested cf-form-checkboxes"
                  >
                    <div
                      className="cf-form-checkbox"
                    >
                      <input
                        aria-label="copyRequested"
                        checked={false}
                        id="copyRequested"
                        name="copyRequested"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <label
                        htmlFor="copyRequested"
                      >
                        <span
                          className=""
                        >
                          Yes, Transcript Requested
                        </span>
                         
                      </label>
                    </div>
                  </div>
                </Checkbox>
              </div>
              <DateSelector
                label="Copy Sent to Appellant/Rep"
                name="copySentDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Copy Sent to Appellant/Rep"
                  max="9999-12-31"
                  name="copySentDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="copySentDate"
                    >
                      <strong>
                        <span>
                          Copy Sent to Appellant/Rep
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="copySentDate"
                      max="9999-12-31"
                      name="copySentDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <div />
            </div>
          </TranscriptionRequestInputs>
        </div>
      </div>
    </ContentSection>
  </TranscriptionFormSection>
</DetailsForm>
`;

exports[`DetailsForm Matches snapshot with default props when passed in 1`] = `
<DetailsForm>
  <ContentSection
    header="Hearing Details"
  >
    <div
      className="cf-app-segment"
    >
      <h2
        data-css-3rhuy2=""
      >
        Hearing Details
      </h2>
      <div
        data-css-1571z6o=""
      >
        <div
          data-css-1fmltfu=""
        >
          <Connect(JudgeDropdown)
            name="judgeDropdown"
            onChange={[Function]}
          >
            <JudgeDropdown
              judges={Object {}}
              label="VLJ"
              name="judgeDropdown"
              onChange={[Function]}
              onFetchDropdownData={[Function]}
              onReceiveDropdownData={[Function]}
            >
              <SearchableDropdown
                label="VLJ"
                loading={false}
                name="judgeDropdown"
                onChange={[Function]}
                strongLabel={true}
                value={
                  Object {
                    "label": null,
                    "value": null,
                  }
                }
              >
                <div
                  className="cf-form-dropdown dropdown-judgeDropdown"
                >
                  <label
                    className="question-label"
                    htmlFor="judgeDropdown"
                  >
                    <strong>
                      <span>
                        VLJ
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "judgeDropdown",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText=""
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      value={
                        Object {
                          "label": null,
                          "value": null,
                        }
                      }
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable has-value"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-2--value"
                          >
                            <Value
                              disabled={false}
                              id="react-select-2--value-item"
                              instancePrefix="react-select-2-"
                              onClick={null}
                              value={
                                Object {
                                  "label": null,
                                  "value": null,
                                }
                              }
                            >
                              <div
                                className="Select-value"
                              >
                                <span
                                  aria-selected="true"
                                  className="Select-value-label"
                                  id="react-select-2--value-item"
                                  role="option"
                                />
                              </div>
                            </Value>
                            <Component
                              aria-activedescendant="react-select-2--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="judgeDropdown"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-2--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="judgeDropdown"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
            </JudgeDropdown>
          </Connect(JudgeDropdown)>
          <Connect(HearingCoordinatorDropdown)
            name="hearingCoordinatorDropdown"
            onChange={[Function]}
          >
            <HearingCoordinatorDropdown
              hearingCoordinators={
                Object {
                  "isFetching": false,
                  "options": Array [],
                }
              }
              label="Hearing Coordinator"
              name="hearingCoordinatorDropdown"
              onChange={[Function]}
              onFetchDropdownData={[Function]}
              onReceiveDropdownData={[Function]}
            >
              <SearchableDropdown
                label="Hearing Coordinator"
                loading={false}
                name="hearingCoordinatorDropdown"
                onChange={[Function]}
                options={Array []}
                strongLabel={true}
                value={
                  Object {
                    "label": null,
                    "value": null,
                  }
                }
              >
                <div
                  className="cf-form-dropdown dropdown-hearingCoordinatorDropdown"
                >
                  <label
                    className="question-label"
                    htmlFor="hearingCoordinatorDropdown"
                  >
                    <strong>
                      <span>
                        Hearing Coordinator
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "hearingCoordinatorDropdown",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText=""
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={Array []}
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      value={
                        Object {
                          "label": null,
                          "value": null,
                        }
                      }
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable has-value"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-3--value"
                          >
                            <Value
                              disabled={false}
                              id="react-select-3--value-item"
                              instancePrefix="react-select-3-"
                              onClick={null}
                              value={
                                Object {
                                  "label": null,
                                  "value": null,
                                }
                              }
                            >
                              <div
                                className="Select-value"
                              >
                                <span
                                  aria-selected="true"
                                  className="Select-value-label"
                                  id="react-select-3--value-item"
                                  role="option"
                                />
                              </div>
                            </Value>
                            <Component
                              aria-activedescendant="react-select-3--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="hearingCoordinatorDropdown"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-3--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="hearingCoordinatorDropdown"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
            </HearingCoordinatorDropdown>
          </Connect(HearingCoordinatorDropdown)>
          <HearingRoomDropdown
            label="Hearing Room"
            name="hearingRoomDropdown"
            onChange={[Function]}
          >
            <SearchableDropdown
              label="Hearing Room"
              loading={false}
              name="hearingRoomDropdown"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": "None",
                    "value": null,
                  },
                  Object {
                    "label": "1 (1W200A)",
                    "value": "1",
                  },
                  Object {
                    "label": "2 (1W200B)",
                    "value": "2",
                  },
                  Object {
                    "label": "3 (1W200C)",
                    "value": "3",
                  },
                  Object {
                    "label": "4 (1W424)",
                    "value": "4",
                  },
                  Object {
                    "label": "5 (1W428)",
                    "value": "5",
                  },
                  Object {
                    "label": "6 (1W432)",
                    "value": "6",
                  },
                  Object {
                    "label": "7 (1W434)",
                    "value": "7",
                  },
                  Object {
                    "label": "8 (1W435)",
                    "value": "8",
                  },
                  Object {
                    "label": "9 (1W436)",
                    "value": "9",
                  },
                  Object {
                    "label": "10 (1W437)",
                    "value": "10",
                  },
                  Object {
                    "label": "11 (1W438)",
                    "value": "11",
                  },
                  Object {
                    "label": "12 (1W439)",
                    "value": "12",
                  },
                  Object {
                    "label": "13 (1W440)",
                    "value": "13",
                  },
                ]
              }
              strongLabel={true}
              value={
                Object {
                  "label": null,
                  "value": null,
                }
              }
            >
              <div
                className="cf-form-dropdown dropdown-hearingRoomDropdown"
              >
                <label
                  className="question-label"
                  htmlFor="hearingRoomDropdown"
                >
                  <strong>
                    <span>
                      Hearing Room
                    </span>
                  </strong>
                </label>
                <div
                  className=""
                >
                  <Select
                    addLabelText="Add \\"{label}\\"?"
                    arrowRenderer={[Function]}
                    autosize={true}
                    backspaceRemoves={true}
                    backspaceToRemoveMessage="Press backspace to remove {label}"
                    cache={false}
                    clearAllText="Clear all"
                    clearRenderer={[Function]}
                    clearValueText="Clear value"
                    clearable={false}
                    deleteRemoves={true}
                    delimiter=","
                    disabled={false}
                    escapeClearsValue={true}
                    filterOptions={[Function]}
                    ignoreAccents={true}
                    ignoreCase={true}
                    inputProps={
                      Object {
                        "autoComplete": "off",
                        "id": "hearingRoomDropdown",
                      }
                    }
                    isLoading={false}
                    joinValues={false}
                    labelKey="label"
                    matchPos="any"
                    matchProp="any"
                    menuBuffer={0}
                    menuRenderer={[Function]}
                    multi={false}
                    noResultsText="Not an option"
                    onBlurResetsInput={false}
                    onChange={[Function]}
                    onCloseResetsInput={true}
                    optionComponent={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "None",
                          "value": null,
                        },
                        Object {
                          "label": "1 (1W200A)",
                          "value": "1",
                        },
                        Object {
                          "label": "2 (1W200B)",
                          "value": "2",
                        },
                        Object {
                          "label": "3 (1W200C)",
                          "value": "3",
                        },
                        Object {
                          "label": "4 (1W424)",
                          "value": "4",
                        },
                        Object {
                          "label": "5 (1W428)",
                          "value": "5",
                        },
                        Object {
                          "label": "6 (1W432)",
                          "value": "6",
                        },
                        Object {
                          "label": "7 (1W434)",
                          "value": "7",
                        },
                        Object {
                          "label": "8 (1W435)",
                          "value": "8",
                        },
                        Object {
                          "label": "9 (1W436)",
                          "value": "9",
                        },
                        Object {
                          "label": "10 (1W437)",
                          "value": "10",
                        },
                        Object {
                          "label": "11 (1W438)",
                          "value": "11",
                        },
                        Object {
                          "label": "12 (1W439)",
                          "value": "12",
                        },
                        Object {
                          "label": "13 (1W440)",
                          "value": "13",
                        },
                      ]
                    }
                    pageSize={5}
                    placeholder="Select..."
                    required={false}
                    scrollMenuIntoView={true}
                    searchable={true}
                    shouldKeyDownEventCreateNewOption={[Function]}
                    simpleValue={false}
                    tabSelectsValue={true}
                    value={
                      Object {
                        "label": null,
                        "value": null,
                      }
                    }
                    valueComponent={[Function]}
                    valueKey="value"
                  >
                    <div
                      className="Select Select--single is-searchable has-value"
                    >
                      <div
                        className="Select-control"
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="Select-multi-value-wrapper"
                          id="react-select-4--value"
                        >
                          <Value
                            disabled={false}
                            id="react-select-4--value-item"
                            instancePrefix="react-select-4-"
                            onClick={null}
                            value={
                              Object {
                                "label": null,
                                "value": null,
                              }
                            }
                          >
                            <div
                              className="Select-value"
                            >
                              <span
                                aria-selected="true"
                                className="Select-value-label"
                                id="react-select-4--value-item"
                                role="option"
                              />
                            </div>
                          </Value>
                          <Component
                            aria-activedescendant="react-select-4--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            autoComplete="off"
                            className="Select-input"
                            id="hearingRoomDropdown"
                            minWidth="5"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            value=""
                          >
                            <div
                              className="Select-input"
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <style
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "input#undefined::-ms-clear {display: none;}",
                                  }
                                }
                              />
                              <input
                                aria-activedescendant="react-select-4--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                autoComplete="off"
                                id="hearingRoomDropdown"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                style={
                                  Object {
                                    "boxSizing": "content-box",
                                    "width": "5px",
                                  }
                                }
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </Component>
                        </span>
                        <span
                          className="Select-arrow-zone"
                          onMouseDown={[Function]}
                        >
                          <span
                            className="Select-arrow"
                            onMouseDown={[Function]}
                          />
                        </span>
                      </div>
                    </div>
                  </Select>
                </div>
              </div>
            </SearchableDropdown>
          </HearingRoomDropdown>
        </div>
        <div
          data-css-1fmltfu=""
        >
          <HearingTypeDropdown
            styling={
              Object {
                "data-css-vzv9iy": "",
              }
            }
          >
            <SearchableDropdown
              label="Hearing Type"
              loading={false}
              name="hearingType"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": undefined,
                    "value": false,
                  },
                  Object {
                    "label": "Virtual",
                    "value": true,
                  },
                ]
              }
              strongLabel={true}
              styling={
                Object {
                  "data-css-vzv9iy": "",
                }
              }
              value={
                Object {
                  "label": undefined,
                  "value": false,
                }
              }
            >
              <div
                className="cf-form-dropdown dropdown-hearingType"
                data-css-vzv9iy=""
              >
                <label
                  className="question-label"
                  htmlFor="hearingType"
                >
                  <strong>
                    <span>
                      Hearing Type
                    </span>
                  </strong>
                </label>
                <div
                  className=""
                >
                  <Select
                    addLabelText="Add \\"{label}\\"?"
                    arrowRenderer={[Function]}
                    autosize={true}
                    backspaceRemoves={true}
                    backspaceToRemoveMessage="Press backspace to remove {label}"
                    cache={false}
                    clearAllText="Clear all"
                    clearRenderer={[Function]}
                    clearValueText="Clear value"
                    clearable={false}
                    deleteRemoves={true}
                    delimiter=","
                    disabled={false}
                    escapeClearsValue={true}
                    filterOptions={[Function]}
                    ignoreAccents={true}
                    ignoreCase={true}
                    inputProps={
                      Object {
                        "autoComplete": "off",
                        "id": "hearingType",
                      }
                    }
                    isLoading={false}
                    joinValues={false}
                    labelKey="label"
                    matchPos="any"
                    matchProp="any"
                    menuBuffer={0}
                    menuRenderer={[Function]}
                    multi={false}
                    noResultsText="Not an option"
                    onBlurResetsInput={false}
                    onChange={[Function]}
                    onCloseResetsInput={true}
                    optionComponent={[Function]}
                    options={
                      Array [
                        Object {
                          "label": undefined,
                          "value": false,
                        },
                        Object {
                          "label": "Virtual",
                          "value": true,
                        },
                      ]
                    }
                    pageSize={5}
                    placeholder="Select..."
                    required={false}
                    scrollMenuIntoView={true}
                    searchable={true}
                    shouldKeyDownEventCreateNewOption={[Function]}
                    simpleValue={false}
                    tabSelectsValue={true}
                    value={
                      Object {
                        "label": undefined,
                        "value": false,
                      }
                    }
                    valueComponent={[Function]}
                    valueKey="value"
                  >
                    <div
                      className="Select Select--single is-searchable has-value"
                    >
                      <div
                        className="Select-control"
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="Select-multi-value-wrapper"
                          id="react-select-5--value"
                        >
                          <Value
                            disabled={false}
                            id="react-select-5--value-item"
                            instancePrefix="react-select-5-"
                            onClick={null}
                            value={
                              Object {
                                "label": undefined,
                                "value": false,
                              }
                            }
                          >
                            <div
                              className="Select-value"
                            >
                              <span
                                aria-selected="true"
                                className="Select-value-label"
                                id="react-select-5--value-item"
                                role="option"
                              />
                            </div>
                          </Value>
                          <Component
                            aria-activedescendant="react-select-5--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            autoComplete="off"
                            className="Select-input"
                            id="hearingType"
                            minWidth="5"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            value=""
                          >
                            <div
                              className="Select-input"
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <style
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "input#undefined::-ms-clear {display: none;}",
                                  }
                                }
                              />
                              <input
                                aria-activedescendant="react-select-5--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                autoComplete="off"
                                id="hearingType"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                style={
                                  Object {
                                    "boxSizing": "content-box",
                                    "width": "5px",
                                  }
                                }
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </Component>
                        </span>
                        <span
                          className="Select-arrow-zone"
                          onMouseDown={[Function]}
                        >
                          <span
                            className="Select-arrow"
                            onMouseDown={[Function]}
                          />
                        </span>
                      </div>
                    </div>
                  </Select>
                </div>
              </div>
            </SearchableDropdown>
          </HearingTypeDropdown>
          <div>
            <strong>
              Waive 90 Day Evidence Hold
            </strong>
            <Checkbox
              label="Yes, Waive 90 Day Evidence Hold"
              name="evidenceWindowWaived"
              onChange={[Function]}
              required={false}
              value={false}
            >
              <div
                className="checkbox-wrapper-evidenceWindowWaived cf-form-checkboxes"
              >
                <div
                  className="cf-form-checkbox"
                >
                  <input
                    aria-label="evidenceWindowWaived"
                    checked={false}
                    id="evidenceWindowWaived"
                    name="evidenceWindowWaived"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <label
                    htmlFor="evidenceWindowWaived"
                  >
                    <span
                      className=""
                    >
                      Yes, Waive 90 Day Evidence Hold
                    </span>
                     
                  </label>
                </div>
              </div>
            </Checkbox>
          </div>
          <div />
        </div>
        <div>
          <TextareaField
            disabled={false}
            name="Notes"
            onChange={[Function]}
            optional={false}
            required={false}
            strongLabel={true}
            styling={
              Object {
                "data-css-d0z96": "",
              }
            }
            value=""
          >
            <div
              className="cf-form-textarea"
              data-css-d0z96=""
            >
              <label
                className="question-label"
                htmlFor="Notes"
              >
                <strong>
                  <span>
                    Notes
                  </span>
                </strong>
              </label>
              <textarea
                disabled={false}
                id="Notes"
                name="Notes"
                onChange={[Function]}
                value=""
              />
            </div>
          </TextareaField>
        </div>
      </div>
    </div>
  </ContentSection>
  <VirtualHearingForm
    dispatch={[MockFunction]}
  />
  <TranscriptionFormSection
    dispatch={[MockFunction]}
  >
    <ContentSection
      header="Transcription Details"
    >
      <div
        className="cf-app-segment"
      >
        <h2
          data-css-3rhuy2=""
        >
          Transcription Details
        </h2>
        <div
          data-css-1571z6o=""
        >
          <TranscriptionDetailsInputs
            title="Transcription Details"
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <TextField
                className={
                  Array [
                    "cf-form-textinput",
                  ]
                }
                label="Task #"
                name="taskNumber"
                onChange={[Function]}
                optional={false}
                required={false}
                strongLabel={true}
                type="text"
                useAriaLabel={false}
              >
                <div
                  className="cf-form-textinput   "
                >
                  <label
                    htmlFor="taskNumber"
                  >
                    <strong>
                      <span>
                        Task #
                      </span>
                    </strong>
                  </label>
                  <input
                    className={
                      Array [
                        "cf-form-textinput",
                      ]
                    }
                    id="taskNumber"
                    name="taskNumber"
                    onChange={[Function]}
                    type="text"
                    value=""
                  />
                </div>
              </TextField>
              <SearchableDropdown
                label="Transcriber"
                loading={false}
                name="transcriber"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "",
                      "value": null,
                    },
                    Object {
                      "label": "Genesis Government Solutions, Inc.",
                      "value": "Genesis Government Solutions, Inc.",
                    },
                    Object {
                      "label": "Jamison Professional Services",
                      "value": "Jamison Professional Services",
                    },
                    Object {
                      "label": "The Ravens Group, Inc.",
                      "value": "The Ravens Group, Inc.",
                    },
                  ]
                }
                strongLabel={true}
              >
                <div
                  className="cf-form-dropdown dropdown-transcriber"
                >
                  <label
                    className="question-label"
                    htmlFor="transcriber"
                  >
                    <strong>
                      <span>
                        Transcriber
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "transcriber",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText="Not an option"
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "",
                            "value": null,
                          },
                          Object {
                            "label": "Genesis Government Solutions, Inc.",
                            "value": "Genesis Government Solutions, Inc.",
                          },
                          Object {
                            "label": "Jamison Professional Services",
                            "value": "Jamison Professional Services",
                          },
                          Object {
                            "label": "The Ravens Group, Inc.",
                            "value": "The Ravens Group, Inc.",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-6--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <Component
                              aria-activedescendant="react-select-6--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="transcriber"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-6--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="transcriber"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
              <div />
            </div>
            <div
              data-css-1fmltfu=""
            >
              <DateSelector
                label="Sent to Transcriber"
                name="sentToTranscriberDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Sent to Transcriber"
                  max="9999-12-31"
                  name="sentToTranscriberDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="sentToTranscriberDate"
                    >
                      <strong>
                        <span>
                          Sent to Transcriber
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="sentToTranscriberDate"
                      max="9999-12-31"
                      name="sentToTranscriberDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <DateSelector
                label="Expected Return Date"
                name="expectedReturnDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Expected Return Date"
                  max="9999-12-31"
                  name="expectedReturnDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="expectedReturnDate"
                    >
                      <strong>
                        <span>
                          Expected Return Date
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="expectedReturnDate"
                      max="9999-12-31"
                      name="expectedReturnDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <DateSelector
                label="Transcript Uploaded to VBMS"
                name="uploadedToVbmsDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Transcript Uploaded to VBMS"
                  max="9999-12-31"
                  name="uploadedToVbmsDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="uploadedToVbmsDate"
                    >
                      <strong>
                        <span>
                          Transcript Uploaded to VBMS
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="uploadedToVbmsDate"
                      max="9999-12-31"
                      name="uploadedToVbmsDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
            </div>
          </TranscriptionDetailsInputs>
          <div
            className="cf-help-divider"
          />
          <h3>
            Transcription Problem
          </h3>
          <TranscriptionProblemInputs
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <SearchableDropdown
                label="Transcription Problem Type"
                loading={false}
                name="problemType"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "No audio",
                      "value": "No audio",
                    },
                    Object {
                      "label": "Poor Audio Quality",
                      "value": "Poor Audio Quality",
                    },
                    Object {
                      "label": "Incomplete Hearing",
                      "value": "Incomplete Hearing",
                    },
                    Object {
                      "label": "Other (see notes)",
                      "value": "Other (see notes)",
                    },
                    Object {
                      "label": "None",
                      "value": null,
                    },
                  ]
                }
                strongLabel={true}
              >
                <div
                  className="cf-form-dropdown dropdown-problemType"
                >
                  <label
                    className="question-label"
                    htmlFor="problemType"
                  >
                    <strong>
                      <span>
                        Transcription Problem Type
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "problemType",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText="Not an option"
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "No audio",
                            "value": "No audio",
                          },
                          Object {
                            "label": "Poor Audio Quality",
                            "value": "Poor Audio Quality",
                          },
                          Object {
                            "label": "Incomplete Hearing",
                            "value": "Incomplete Hearing",
                          },
                          Object {
                            "label": "Other (see notes)",
                            "value": "Other (see notes)",
                          },
                          Object {
                            "label": "None",
                            "value": null,
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-7--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <Component
                              aria-activedescendant="react-select-7--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="problemType"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-7--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="problemType"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
              <DateSelector
                label="Problem Notice Sent"
                name="problemNoticeSentDate"
                onChange={[Function]}
                readOnly={true}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Problem Notice Sent"
                  max="9999-12-31"
                  name="problemNoticeSentDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  readOnly={true}
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="problemNoticeSentDate"
                    >
                      <strong>
                        <span>
                          Problem Notice Sent
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="problemNoticeSentDate"
                      max="9999-12-31"
                      name="problemNoticeSentDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      readOnly={true}
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <RadioField
                className={
                  Array [
                    "usa-fieldset-inputs",
                  ]
                }
                label="Requested Remedy"
                name="requestedRemedy"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "disabled": true,
                      "displayText": "Proceed without transcript",
                      "value": "Proceed without transcript",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "Proceed with partial transcript",
                      "value": "Proceed with partial transcript",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "New hearing",
                      "value": "New hearing",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "None",
                      "value": "",
                    },
                  ]
                }
                required={false}
                strongLabel={true}
                value=""
              >
                <fieldset
                  className="usa-fieldset-inputs cf-form-radio "
                >
                  <legend
                    className=""
                  >
                    <strong>
                      <span>
                        Requested Remedy
                         
                      </span>
                    </strong>
                  </legend>
                  <div
                    className="cf-form-radio-options"
                  >
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-Proceed without transcript-0"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_Proceed without transcript"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="Proceed without transcript"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_Proceed without transcript"
                      >
                        Proceed without transcript
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-Proceed with partial transcript-1"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_Proceed with partial transcript"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="Proceed with partial transcript"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_Proceed with partial transcript"
                      >
                        Proceed with partial transcript
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-New hearing-2"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_New hearing"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="New hearing"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_New hearing"
                      >
                        New hearing
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy--3"
                    >
                      <input
                        checked={true}
                        disabled={true}
                        id="requestedRemedy_"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value=""
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_"
                      >
                        None
                      </label>
                    </div>
                  </div>
                </fieldset>
              </RadioField>
            </div>
          </TranscriptionProblemInputs>
          <div
            className="cf-help-divider"
          />
          <h3>
            Transcription Request
          </h3>
          <TranscriptionRequestInputs
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <div>
                <strong>
                  Copy Requested by Appellant/Rep
                </strong>
                <Checkbox
                  label="Yes, Transcript Requested"
                  name="copyRequested"
                  onChange={[Function]}
                  required={false}
                  value={false}
                >
                  <div
                    className="checkbox-wrapper-copyRequested cf-form-checkboxes"
                  >
                    <div
                      className="cf-form-checkbox"
                    >
                      <input
                        aria-label="copyRequested"
                        checked={false}
                        id="copyRequested"
                        name="copyRequested"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <label
                        htmlFor="copyRequested"
                      >
                        <span
                          className=""
                        >
                          Yes, Transcript Requested
                        </span>
                         
                      </label>
                    </div>
                  </div>
                </Checkbox>
              </div>
              <DateSelector
                label="Copy Sent to Appellant/Rep"
                name="copySentDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Copy Sent to Appellant/Rep"
                  max="9999-12-31"
                  name="copySentDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="copySentDate"
                    >
                      <strong>
                        <span>
                          Copy Sent to Appellant/Rep
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="copySentDate"
                      max="9999-12-31"
                      name="copySentDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <div />
            </div>
          </TranscriptionRequestInputs>
        </div>
      </div>
    </ContentSection>
  </TranscriptionFormSection>
</DetailsForm>
`;

exports[`DetailsForm Matches snapshot with for AMA hearing 1`] = `
<DetailsForm
  isLegacy={false}
>
  <ContentSection
    header="Hearing Details"
  >
    <div
      className="cf-app-segment"
    >
      <h2
        data-css-3rhuy2=""
      >
        Hearing Details
      </h2>
      <div
        data-css-1571z6o=""
      >
        <div
          data-css-1fmltfu=""
        >
          <Connect(JudgeDropdown)
            name="judgeDropdown"
            onChange={[Function]}
          >
            <JudgeDropdown
              judges={Object {}}
              label="VLJ"
              name="judgeDropdown"
              onChange={[Function]}
              onFetchDropdownData={[Function]}
              onReceiveDropdownData={[Function]}
            >
              <SearchableDropdown
                label="VLJ"
                loading={false}
                name="judgeDropdown"
                onChange={[Function]}
                strongLabel={true}
                value={
                  Object {
                    "label": null,
                    "value": null,
                  }
                }
              >
                <div
                  className="cf-form-dropdown dropdown-judgeDropdown"
                >
                  <label
                    className="question-label"
                    htmlFor="judgeDropdown"
                  >
                    <strong>
                      <span>
                        VLJ
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "judgeDropdown",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText=""
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      value={
                        Object {
                          "label": null,
                          "value": null,
                        }
                      }
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable has-value"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-12--value"
                          >
                            <Value
                              disabled={false}
                              id="react-select-12--value-item"
                              instancePrefix="react-select-12-"
                              onClick={null}
                              value={
                                Object {
                                  "label": null,
                                  "value": null,
                                }
                              }
                            >
                              <div
                                className="Select-value"
                              >
                                <span
                                  aria-selected="true"
                                  className="Select-value-label"
                                  id="react-select-12--value-item"
                                  role="option"
                                />
                              </div>
                            </Value>
                            <Component
                              aria-activedescendant="react-select-12--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="judgeDropdown"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-12--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="judgeDropdown"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
            </JudgeDropdown>
          </Connect(JudgeDropdown)>
          <Connect(HearingCoordinatorDropdown)
            name="hearingCoordinatorDropdown"
            onChange={[Function]}
          >
            <HearingCoordinatorDropdown
              hearingCoordinators={
                Object {
                  "isFetching": false,
                  "options": Array [],
                }
              }
              label="Hearing Coordinator"
              name="hearingCoordinatorDropdown"
              onChange={[Function]}
              onFetchDropdownData={[Function]}
              onReceiveDropdownData={[Function]}
            >
              <SearchableDropdown
                label="Hearing Coordinator"
                loading={false}
                name="hearingCoordinatorDropdown"
                onChange={[Function]}
                options={Array []}
                strongLabel={true}
                value={
                  Object {
                    "label": null,
                    "value": null,
                  }
                }
              >
                <div
                  className="cf-form-dropdown dropdown-hearingCoordinatorDropdown"
                >
                  <label
                    className="question-label"
                    htmlFor="hearingCoordinatorDropdown"
                  >
                    <strong>
                      <span>
                        Hearing Coordinator
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "hearingCoordinatorDropdown",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText=""
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={Array []}
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      value={
                        Object {
                          "label": null,
                          "value": null,
                        }
                      }
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable has-value"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-13--value"
                          >
                            <Value
                              disabled={false}
                              id="react-select-13--value-item"
                              instancePrefix="react-select-13-"
                              onClick={null}
                              value={
                                Object {
                                  "label": null,
                                  "value": null,
                                }
                              }
                            >
                              <div
                                className="Select-value"
                              >
                                <span
                                  aria-selected="true"
                                  className="Select-value-label"
                                  id="react-select-13--value-item"
                                  role="option"
                                />
                              </div>
                            </Value>
                            <Component
                              aria-activedescendant="react-select-13--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="hearingCoordinatorDropdown"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-13--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="hearingCoordinatorDropdown"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
            </HearingCoordinatorDropdown>
          </Connect(HearingCoordinatorDropdown)>
          <HearingRoomDropdown
            label="Hearing Room"
            name="hearingRoomDropdown"
            onChange={[Function]}
          >
            <SearchableDropdown
              label="Hearing Room"
              loading={false}
              name="hearingRoomDropdown"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": "None",
                    "value": null,
                  },
                  Object {
                    "label": "1 (1W200A)",
                    "value": "1",
                  },
                  Object {
                    "label": "2 (1W200B)",
                    "value": "2",
                  },
                  Object {
                    "label": "3 (1W200C)",
                    "value": "3",
                  },
                  Object {
                    "label": "4 (1W424)",
                    "value": "4",
                  },
                  Object {
                    "label": "5 (1W428)",
                    "value": "5",
                  },
                  Object {
                    "label": "6 (1W432)",
                    "value": "6",
                  },
                  Object {
                    "label": "7 (1W434)",
                    "value": "7",
                  },
                  Object {
                    "label": "8 (1W435)",
                    "value": "8",
                  },
                  Object {
                    "label": "9 (1W436)",
                    "value": "9",
                  },
                  Object {
                    "label": "10 (1W437)",
                    "value": "10",
                  },
                  Object {
                    "label": "11 (1W438)",
                    "value": "11",
                  },
                  Object {
                    "label": "12 (1W439)",
                    "value": "12",
                  },
                  Object {
                    "label": "13 (1W440)",
                    "value": "13",
                  },
                ]
              }
              strongLabel={true}
              value={
                Object {
                  "label": null,
                  "value": null,
                }
              }
            >
              <div
                className="cf-form-dropdown dropdown-hearingRoomDropdown"
              >
                <label
                  className="question-label"
                  htmlFor="hearingRoomDropdown"
                >
                  <strong>
                    <span>
                      Hearing Room
                    </span>
                  </strong>
                </label>
                <div
                  className=""
                >
                  <Select
                    addLabelText="Add \\"{label}\\"?"
                    arrowRenderer={[Function]}
                    autosize={true}
                    backspaceRemoves={true}
                    backspaceToRemoveMessage="Press backspace to remove {label}"
                    cache={false}
                    clearAllText="Clear all"
                    clearRenderer={[Function]}
                    clearValueText="Clear value"
                    clearable={false}
                    deleteRemoves={true}
                    delimiter=","
                    disabled={false}
                    escapeClearsValue={true}
                    filterOptions={[Function]}
                    ignoreAccents={true}
                    ignoreCase={true}
                    inputProps={
                      Object {
                        "autoComplete": "off",
                        "id": "hearingRoomDropdown",
                      }
                    }
                    isLoading={false}
                    joinValues={false}
                    labelKey="label"
                    matchPos="any"
                    matchProp="any"
                    menuBuffer={0}
                    menuRenderer={[Function]}
                    multi={false}
                    noResultsText="Not an option"
                    onBlurResetsInput={false}
                    onChange={[Function]}
                    onCloseResetsInput={true}
                    optionComponent={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "None",
                          "value": null,
                        },
                        Object {
                          "label": "1 (1W200A)",
                          "value": "1",
                        },
                        Object {
                          "label": "2 (1W200B)",
                          "value": "2",
                        },
                        Object {
                          "label": "3 (1W200C)",
                          "value": "3",
                        },
                        Object {
                          "label": "4 (1W424)",
                          "value": "4",
                        },
                        Object {
                          "label": "5 (1W428)",
                          "value": "5",
                        },
                        Object {
                          "label": "6 (1W432)",
                          "value": "6",
                        },
                        Object {
                          "label": "7 (1W434)",
                          "value": "7",
                        },
                        Object {
                          "label": "8 (1W435)",
                          "value": "8",
                        },
                        Object {
                          "label": "9 (1W436)",
                          "value": "9",
                        },
                        Object {
                          "label": "10 (1W437)",
                          "value": "10",
                        },
                        Object {
                          "label": "11 (1W438)",
                          "value": "11",
                        },
                        Object {
                          "label": "12 (1W439)",
                          "value": "12",
                        },
                        Object {
                          "label": "13 (1W440)",
                          "value": "13",
                        },
                      ]
                    }
                    pageSize={5}
                    placeholder="Select..."
                    required={false}
                    scrollMenuIntoView={true}
                    searchable={true}
                    shouldKeyDownEventCreateNewOption={[Function]}
                    simpleValue={false}
                    tabSelectsValue={true}
                    value={
                      Object {
                        "label": null,
                        "value": null,
                      }
                    }
                    valueComponent={[Function]}
                    valueKey="value"
                  >
                    <div
                      className="Select Select--single is-searchable has-value"
                    >
                      <div
                        className="Select-control"
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="Select-multi-value-wrapper"
                          id="react-select-14--value"
                        >
                          <Value
                            disabled={false}
                            id="react-select-14--value-item"
                            instancePrefix="react-select-14-"
                            onClick={null}
                            value={
                              Object {
                                "label": null,
                                "value": null,
                              }
                            }
                          >
                            <div
                              className="Select-value"
                            >
                              <span
                                aria-selected="true"
                                className="Select-value-label"
                                id="react-select-14--value-item"
                                role="option"
                              />
                            </div>
                          </Value>
                          <Component
                            aria-activedescendant="react-select-14--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            autoComplete="off"
                            className="Select-input"
                            id="hearingRoomDropdown"
                            minWidth="5"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            value=""
                          >
                            <div
                              className="Select-input"
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <style
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "input#undefined::-ms-clear {display: none;}",
                                  }
                                }
                              />
                              <input
                                aria-activedescendant="react-select-14--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                autoComplete="off"
                                id="hearingRoomDropdown"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                style={
                                  Object {
                                    "boxSizing": "content-box",
                                    "width": "5px",
                                  }
                                }
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </Component>
                        </span>
                        <span
                          className="Select-arrow-zone"
                          onMouseDown={[Function]}
                        >
                          <span
                            className="Select-arrow"
                            onMouseDown={[Function]}
                          />
                        </span>
                      </div>
                    </div>
                  </Select>
                </div>
              </div>
            </SearchableDropdown>
          </HearingRoomDropdown>
        </div>
        <div
          data-css-1fmltfu=""
        >
          <HearingTypeDropdown
            styling={
              Object {
                "data-css-vzv9iy": "",
              }
            }
          >
            <SearchableDropdown
              label="Hearing Type"
              loading={false}
              name="hearingType"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": undefined,
                    "value": false,
                  },
                  Object {
                    "label": "Virtual",
                    "value": true,
                  },
                ]
              }
              strongLabel={true}
              styling={
                Object {
                  "data-css-vzv9iy": "",
                }
              }
              value={
                Object {
                  "label": undefined,
                  "value": false,
                }
              }
            >
              <div
                className="cf-form-dropdown dropdown-hearingType"
                data-css-vzv9iy=""
              >
                <label
                  className="question-label"
                  htmlFor="hearingType"
                >
                  <strong>
                    <span>
                      Hearing Type
                    </span>
                  </strong>
                </label>
                <div
                  className=""
                >
                  <Select
                    addLabelText="Add \\"{label}\\"?"
                    arrowRenderer={[Function]}
                    autosize={true}
                    backspaceRemoves={true}
                    backspaceToRemoveMessage="Press backspace to remove {label}"
                    cache={false}
                    clearAllText="Clear all"
                    clearRenderer={[Function]}
                    clearValueText="Clear value"
                    clearable={false}
                    deleteRemoves={true}
                    delimiter=","
                    disabled={false}
                    escapeClearsValue={true}
                    filterOptions={[Function]}
                    ignoreAccents={true}
                    ignoreCase={true}
                    inputProps={
                      Object {
                        "autoComplete": "off",
                        "id": "hearingType",
                      }
                    }
                    isLoading={false}
                    joinValues={false}
                    labelKey="label"
                    matchPos="any"
                    matchProp="any"
                    menuBuffer={0}
                    menuRenderer={[Function]}
                    multi={false}
                    noResultsText="Not an option"
                    onBlurResetsInput={false}
                    onChange={[Function]}
                    onCloseResetsInput={true}
                    optionComponent={[Function]}
                    options={
                      Array [
                        Object {
                          "label": undefined,
                          "value": false,
                        },
                        Object {
                          "label": "Virtual",
                          "value": true,
                        },
                      ]
                    }
                    pageSize={5}
                    placeholder="Select..."
                    required={false}
                    scrollMenuIntoView={true}
                    searchable={true}
                    shouldKeyDownEventCreateNewOption={[Function]}
                    simpleValue={false}
                    tabSelectsValue={true}
                    value={
                      Object {
                        "label": undefined,
                        "value": false,
                      }
                    }
                    valueComponent={[Function]}
                    valueKey="value"
                  >
                    <div
                      className="Select Select--single is-searchable has-value"
                    >
                      <div
                        className="Select-control"
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="Select-multi-value-wrapper"
                          id="react-select-15--value"
                        >
                          <Value
                            disabled={false}
                            id="react-select-15--value-item"
                            instancePrefix="react-select-15-"
                            onClick={null}
                            value={
                              Object {
                                "label": undefined,
                                "value": false,
                              }
                            }
                          >
                            <div
                              className="Select-value"
                            >
                              <span
                                aria-selected="true"
                                className="Select-value-label"
                                id="react-select-15--value-item"
                                role="option"
                              />
                            </div>
                          </Value>
                          <Component
                            aria-activedescendant="react-select-15--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            autoComplete="off"
                            className="Select-input"
                            id="hearingType"
                            minWidth="5"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            value=""
                          >
                            <div
                              className="Select-input"
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <style
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "input#undefined::-ms-clear {display: none;}",
                                  }
                                }
                              />
                              <input
                                aria-activedescendant="react-select-15--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                autoComplete="off"
                                id="hearingType"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                style={
                                  Object {
                                    "boxSizing": "content-box",
                                    "width": "5px",
                                  }
                                }
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </Component>
                        </span>
                        <span
                          className="Select-arrow-zone"
                          onMouseDown={[Function]}
                        >
                          <span
                            className="Select-arrow"
                            onMouseDown={[Function]}
                          />
                        </span>
                      </div>
                    </div>
                  </Select>
                </div>
              </div>
            </SearchableDropdown>
          </HearingTypeDropdown>
          <div>
            <strong>
              Waive 90 Day Evidence Hold
            </strong>
            <Checkbox
              label="Yes, Waive 90 Day Evidence Hold"
              name="evidenceWindowWaived"
              onChange={[Function]}
              required={false}
              value={false}
            >
              <div
                className="checkbox-wrapper-evidenceWindowWaived cf-form-checkboxes"
              >
                <div
                  className="cf-form-checkbox"
                >
                  <input
                    aria-label="evidenceWindowWaived"
                    checked={false}
                    id="evidenceWindowWaived"
                    name="evidenceWindowWaived"
                    onChange={[Function]}
                    type="checkbox"
                  />
                  <label
                    htmlFor="evidenceWindowWaived"
                  >
                    <span
                      className=""
                    >
                      Yes, Waive 90 Day Evidence Hold
                    </span>
                     
                  </label>
                </div>
              </div>
            </Checkbox>
          </div>
          <div />
        </div>
        <div>
          <TextareaField
            disabled={false}
            name="Notes"
            onChange={[Function]}
            optional={false}
            required={false}
            strongLabel={true}
            styling={
              Object {
                "data-css-d0z96": "",
              }
            }
            value=""
          >
            <div
              className="cf-form-textarea"
              data-css-d0z96=""
            >
              <label
                className="question-label"
                htmlFor="Notes"
              >
                <strong>
                  <span>
                    Notes
                  </span>
                </strong>
              </label>
              <textarea
                disabled={false}
                id="Notes"
                name="Notes"
                onChange={[Function]}
                value=""
              />
            </div>
          </TextareaField>
        </div>
      </div>
    </div>
  </ContentSection>
  <VirtualHearingForm
    dispatch={[MockFunction]}
  />
  <TranscriptionFormSection
    dispatch={[MockFunction]}
  >
    <ContentSection
      header="Transcription Details"
    >
      <div
        className="cf-app-segment"
      >
        <h2
          data-css-3rhuy2=""
        >
          Transcription Details
        </h2>
        <div
          data-css-1571z6o=""
        >
          <TranscriptionDetailsInputs
            title="Transcription Details"
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <TextField
                className={
                  Array [
                    "cf-form-textinput",
                  ]
                }
                label="Task #"
                name="taskNumber"
                onChange={[Function]}
                optional={false}
                required={false}
                strongLabel={true}
                type="text"
                useAriaLabel={false}
              >
                <div
                  className="cf-form-textinput   "
                >
                  <label
                    htmlFor="taskNumber"
                  >
                    <strong>
                      <span>
                        Task #
                      </span>
                    </strong>
                  </label>
                  <input
                    className={
                      Array [
                        "cf-form-textinput",
                      ]
                    }
                    id="taskNumber"
                    name="taskNumber"
                    onChange={[Function]}
                    type="text"
                    value=""
                  />
                </div>
              </TextField>
              <SearchableDropdown
                label="Transcriber"
                loading={false}
                name="transcriber"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "",
                      "value": null,
                    },
                    Object {
                      "label": "Genesis Government Solutions, Inc.",
                      "value": "Genesis Government Solutions, Inc.",
                    },
                    Object {
                      "label": "Jamison Professional Services",
                      "value": "Jamison Professional Services",
                    },
                    Object {
                      "label": "The Ravens Group, Inc.",
                      "value": "The Ravens Group, Inc.",
                    },
                  ]
                }
                strongLabel={true}
              >
                <div
                  className="cf-form-dropdown dropdown-transcriber"
                >
                  <label
                    className="question-label"
                    htmlFor="transcriber"
                  >
                    <strong>
                      <span>
                        Transcriber
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "transcriber",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText="Not an option"
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "",
                            "value": null,
                          },
                          Object {
                            "label": "Genesis Government Solutions, Inc.",
                            "value": "Genesis Government Solutions, Inc.",
                          },
                          Object {
                            "label": "Jamison Professional Services",
                            "value": "Jamison Professional Services",
                          },
                          Object {
                            "label": "The Ravens Group, Inc.",
                            "value": "The Ravens Group, Inc.",
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-16--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <Component
                              aria-activedescendant="react-select-16--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="transcriber"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-16--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="transcriber"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
              <div />
            </div>
            <div
              data-css-1fmltfu=""
            >
              <DateSelector
                label="Sent to Transcriber"
                name="sentToTranscriberDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Sent to Transcriber"
                  max="9999-12-31"
                  name="sentToTranscriberDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="sentToTranscriberDate"
                    >
                      <strong>
                        <span>
                          Sent to Transcriber
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="sentToTranscriberDate"
                      max="9999-12-31"
                      name="sentToTranscriberDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <DateSelector
                label="Expected Return Date"
                name="expectedReturnDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Expected Return Date"
                  max="9999-12-31"
                  name="expectedReturnDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="expectedReturnDate"
                    >
                      <strong>
                        <span>
                          Expected Return Date
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="expectedReturnDate"
                      max="9999-12-31"
                      name="expectedReturnDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <DateSelector
                label="Transcript Uploaded to VBMS"
                name="uploadedToVbmsDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Transcript Uploaded to VBMS"
                  max="9999-12-31"
                  name="uploadedToVbmsDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="uploadedToVbmsDate"
                    >
                      <strong>
                        <span>
                          Transcript Uploaded to VBMS
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="uploadedToVbmsDate"
                      max="9999-12-31"
                      name="uploadedToVbmsDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
            </div>
          </TranscriptionDetailsInputs>
          <div
            className="cf-help-divider"
          />
          <h3>
            Transcription Problem
          </h3>
          <TranscriptionProblemInputs
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <SearchableDropdown
                label="Transcription Problem Type"
                loading={false}
                name="problemType"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "label": "No audio",
                      "value": "No audio",
                    },
                    Object {
                      "label": "Poor Audio Quality",
                      "value": "Poor Audio Quality",
                    },
                    Object {
                      "label": "Incomplete Hearing",
                      "value": "Incomplete Hearing",
                    },
                    Object {
                      "label": "Other (see notes)",
                      "value": "Other (see notes)",
                    },
                    Object {
                      "label": "None",
                      "value": null,
                    },
                  ]
                }
                strongLabel={true}
              >
                <div
                  className="cf-form-dropdown dropdown-problemType"
                >
                  <label
                    className="question-label"
                    htmlFor="problemType"
                  >
                    <strong>
                      <span>
                        Transcription Problem Type
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "problemType",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText="Not an option"
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={
                        Array [
                          Object {
                            "label": "No audio",
                            "value": "No audio",
                          },
                          Object {
                            "label": "Poor Audio Quality",
                            "value": "Poor Audio Quality",
                          },
                          Object {
                            "label": "Incomplete Hearing",
                            "value": "Incomplete Hearing",
                          },
                          Object {
                            "label": "Other (see notes)",
                            "value": "Other (see notes)",
                          },
                          Object {
                            "label": "None",
                            "value": null,
                          },
                        ]
                      }
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-17--value"
                          >
                            <div
                              className="Select-placeholder"
                            >
                              Select...
                            </div>
                            <Component
                              aria-activedescendant="react-select-17--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="problemType"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-17--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="problemType"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
              <DateSelector
                label="Problem Notice Sent"
                name="problemNoticeSentDate"
                onChange={[Function]}
                readOnly={true}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Problem Notice Sent"
                  max="9999-12-31"
                  name="problemNoticeSentDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  readOnly={true}
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="problemNoticeSentDate"
                    >
                      <strong>
                        <span>
                          Problem Notice Sent
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="problemNoticeSentDate"
                      max="9999-12-31"
                      name="problemNoticeSentDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      readOnly={true}
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <RadioField
                className={
                  Array [
                    "usa-fieldset-inputs",
                  ]
                }
                label="Requested Remedy"
                name="requestedRemedy"
                onChange={[Function]}
                options={
                  Array [
                    Object {
                      "disabled": true,
                      "displayText": "Proceed without transcript",
                      "value": "Proceed without transcript",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "Proceed with partial transcript",
                      "value": "Proceed with partial transcript",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "New hearing",
                      "value": "New hearing",
                    },
                    Object {
                      "disabled": true,
                      "displayText": "None",
                      "value": "",
                    },
                  ]
                }
                required={false}
                strongLabel={true}
                value=""
              >
                <fieldset
                  className="usa-fieldset-inputs cf-form-radio "
                >
                  <legend
                    className=""
                  >
                    <strong>
                      <span>
                        Requested Remedy
                         
                      </span>
                    </strong>
                  </legend>
                  <div
                    className="cf-form-radio-options"
                  >
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-Proceed without transcript-0"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_Proceed without transcript"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="Proceed without transcript"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_Proceed without transcript"
                      >
                        Proceed without transcript
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-Proceed with partial transcript-1"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_Proceed with partial transcript"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="Proceed with partial transcript"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_Proceed with partial transcript"
                      >
                        Proceed with partial transcript
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy-New hearing-2"
                    >
                      <input
                        checked={false}
                        disabled={true}
                        id="requestedRemedy_New hearing"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value="New hearing"
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_New hearing"
                      >
                        New hearing
                      </label>
                    </div>
                    <div
                      className="cf-form-radio-option"
                      key="requestedRemedy--3"
                    >
                      <input
                        checked={true}
                        disabled={true}
                        id="requestedRemedy_"
                        name="requestedRemedy"
                        onChange={[Function]}
                        type="radio"
                        value=""
                      />
                      <label
                        className="disabled"
                        htmlFor="requestedRemedy_"
                      >
                        None
                      </label>
                    </div>
                  </div>
                </fieldset>
              </RadioField>
            </div>
          </TranscriptionProblemInputs>
          <div
            className="cf-help-divider"
          />
          <h3>
            Transcription Request
          </h3>
          <TranscriptionRequestInputs
            update={[Function]}
          >
            <div
              data-css-1fmltfu=""
            >
              <div>
                <strong>
                  Copy Requested by Appellant/Rep
                </strong>
                <Checkbox
                  label="Yes, Transcript Requested"
                  name="copyRequested"
                  onChange={[Function]}
                  required={false}
                  value={false}
                >
                  <div
                    className="checkbox-wrapper-copyRequested cf-form-checkboxes"
                  >
                    <div
                      className="cf-form-checkbox"
                    >
                      <input
                        aria-label="copyRequested"
                        checked={false}
                        id="copyRequested"
                        name="copyRequested"
                        onChange={[Function]}
                        type="checkbox"
                      />
                      <label
                        htmlFor="copyRequested"
                      >
                        <span
                          className=""
                        >
                          Yes, Transcript Requested
                        </span>
                         
                      </label>
                    </div>
                  </div>
                </Checkbox>
              </div>
              <DateSelector
                label="Copy Sent to Appellant/Rep"
                name="copySentDate"
                onChange={[Function]}
                strongLabel={true}
                type="date"
              >
                <TextField
                  className={
                    Array [
                      "cf-form-textinput",
                    ]
                  }
                  label="Copy Sent to Appellant/Rep"
                  max="9999-12-31"
                  name="copySentDate"
                  onChange={[Function]}
                  optional={false}
                  placeholder="mm/dd/yyyy"
                  required={false}
                  strongLabel={true}
                  type="date"
                  useAriaLabel={false}
                >
                  <div
                    className="cf-form-textinput   "
                  >
                    <label
                      htmlFor="copySentDate"
                    >
                      <strong>
                        <span>
                          Copy Sent to Appellant/Rep
                        </span>
                      </strong>
                    </label>
                    <input
                      className={
                        Array [
                          "cf-form-textinput",
                        ]
                      }
                      id="copySentDate"
                      max="9999-12-31"
                      name="copySentDate"
                      onChange={[Function]}
                      placeholder="mm/dd/yyyy"
                      type="date"
                      value=""
                    />
                  </div>
                </TextField>
              </DateSelector>
              <div />
            </div>
          </TranscriptionRequestInputs>
        </div>
      </div>
    </ContentSection>
  </TranscriptionFormSection>
</DetailsForm>
`;

exports[`DetailsForm Matches snapshot with for legacy hearing 1`] = `
<DetailsForm
  isLegacy={true}
>
  <ContentSection
    header="Hearing Details"
  >
    <div
      className="cf-app-segment"
    >
      <h2
        data-css-3rhuy2=""
      >
        Hearing Details
      </h2>
      <div
        data-css-1571z6o=""
      >
        <div
          data-css-1fmltfu=""
        >
          <Connect(JudgeDropdown)
            name="judgeDropdown"
            onChange={[Function]}
          >
            <JudgeDropdown
              judges={Object {}}
              label="VLJ"
              name="judgeDropdown"
              onChange={[Function]}
              onFetchDropdownData={[Function]}
              onReceiveDropdownData={[Function]}
            >
              <SearchableDropdown
                label="VLJ"
                loading={false}
                name="judgeDropdown"
                onChange={[Function]}
                strongLabel={true}
                value={
                  Object {
                    "label": null,
                    "value": null,
                  }
                }
              >
                <div
                  className="cf-form-dropdown dropdown-judgeDropdown"
                >
                  <label
                    className="question-label"
                    htmlFor="judgeDropdown"
                  >
                    <strong>
                      <span>
                        VLJ
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "judgeDropdown",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText=""
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      value={
                        Object {
                          "label": null,
                          "value": null,
                        }
                      }
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable has-value"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-8--value"
                          >
                            <Value
                              disabled={false}
                              id="react-select-8--value-item"
                              instancePrefix="react-select-8-"
                              onClick={null}
                              value={
                                Object {
                                  "label": null,
                                  "value": null,
                                }
                              }
                            >
                              <div
                                className="Select-value"
                              >
                                <span
                                  aria-selected="true"
                                  className="Select-value-label"
                                  id="react-select-8--value-item"
                                  role="option"
                                />
                              </div>
                            </Value>
                            <Component
                              aria-activedescendant="react-select-8--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="judgeDropdown"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-8--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="judgeDropdown"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
            </JudgeDropdown>
          </Connect(JudgeDropdown)>
          <Connect(HearingCoordinatorDropdown)
            name="hearingCoordinatorDropdown"
            onChange={[Function]}
          >
            <HearingCoordinatorDropdown
              hearingCoordinators={
                Object {
                  "isFetching": false,
                  "options": Array [],
                }
              }
              label="Hearing Coordinator"
              name="hearingCoordinatorDropdown"
              onChange={[Function]}
              onFetchDropdownData={[Function]}
              onReceiveDropdownData={[Function]}
            >
              <SearchableDropdown
                label="Hearing Coordinator"
                loading={false}
                name="hearingCoordinatorDropdown"
                onChange={[Function]}
                options={Array []}
                strongLabel={true}
                value={
                  Object {
                    "label": null,
                    "value": null,
                  }
                }
              >
                <div
                  className="cf-form-dropdown dropdown-hearingCoordinatorDropdown"
                >
                  <label
                    className="question-label"
                    htmlFor="hearingCoordinatorDropdown"
                  >
                    <strong>
                      <span>
                        Hearing Coordinator
                      </span>
                    </strong>
                  </label>
                  <div
                    className=""
                  >
                    <Select
                      addLabelText="Add \\"{label}\\"?"
                      arrowRenderer={[Function]}
                      autosize={true}
                      backspaceRemoves={true}
                      backspaceToRemoveMessage="Press backspace to remove {label}"
                      cache={false}
                      clearAllText="Clear all"
                      clearRenderer={[Function]}
                      clearValueText="Clear value"
                      clearable={false}
                      deleteRemoves={true}
                      delimiter=","
                      disabled={false}
                      escapeClearsValue={true}
                      filterOptions={[Function]}
                      ignoreAccents={true}
                      ignoreCase={true}
                      inputProps={
                        Object {
                          "autoComplete": "off",
                          "id": "hearingCoordinatorDropdown",
                        }
                      }
                      isLoading={false}
                      joinValues={false}
                      labelKey="label"
                      matchPos="any"
                      matchProp="any"
                      menuBuffer={0}
                      menuRenderer={[Function]}
                      multi={false}
                      noResultsText=""
                      onBlurResetsInput={false}
                      onChange={[Function]}
                      onCloseResetsInput={true}
                      optionComponent={[Function]}
                      options={Array []}
                      pageSize={5}
                      placeholder="Select..."
                      required={false}
                      scrollMenuIntoView={true}
                      searchable={true}
                      shouldKeyDownEventCreateNewOption={[Function]}
                      simpleValue={false}
                      tabSelectsValue={true}
                      value={
                        Object {
                          "label": null,
                          "value": null,
                        }
                      }
                      valueComponent={[Function]}
                      valueKey="value"
                    >
                      <div
                        className="Select Select--single is-searchable has-value"
                      >
                        <div
                          className="Select-control"
                          onKeyDown={[Function]}
                          onMouseDown={[Function]}
                          onTouchEnd={[Function]}
                          onTouchMove={[Function]}
                          onTouchStart={[Function]}
                        >
                          <span
                            className="Select-multi-value-wrapper"
                            id="react-select-9--value"
                          >
                            <Value
                              disabled={false}
                              id="react-select-9--value-item"
                              instancePrefix="react-select-9-"
                              onClick={null}
                              value={
                                Object {
                                  "label": null,
                                  "value": null,
                                }
                              }
                            >
                              <div
                                className="Select-value"
                              >
                                <span
                                  aria-selected="true"
                                  className="Select-value-label"
                                  id="react-select-9--value-item"
                                  role="option"
                                />
                              </div>
                            </Value>
                            <Component
                              aria-activedescendant="react-select-9--value"
                              aria-expanded="false"
                              aria-haspopup="false"
                              aria-owns=""
                              autoComplete="off"
                              className="Select-input"
                              id="hearingCoordinatorDropdown"
                              minWidth="5"
                              onBlur={[Function]}
                              onChange={[Function]}
                              onFocus={[Function]}
                              required={false}
                              role="combobox"
                              value=""
                            >
                              <div
                                className="Select-input"
                                style={
                                  Object {
                                    "display": "inline-block",
                                  }
                                }
                              >
                                <style
                                  dangerouslySetInnerHTML={
                                    Object {
                                      "__html": "input#undefined::-ms-clear {display: none;}",
                                    }
                                  }
                                />
                                <input
                                  aria-activedescendant="react-select-9--value"
                                  aria-expanded="false"
                                  aria-haspopup="false"
                                  aria-owns=""
                                  autoComplete="off"
                                  id="hearingCoordinatorDropdown"
                                  onBlur={[Function]}
                                  onChange={[Function]}
                                  onFocus={[Function]}
                                  required={false}
                                  role="combobox"
                                  style={
                                    Object {
                                      "boxSizing": "content-box",
                                      "width": "5px",
                                    }
                                  }
                                  value=""
                                />
                                <div
                                  style={
                                    Object {
                                      "height": 0,
                                      "left": 0,
                                      "overflow": "scroll",
                                      "position": "absolute",
                                      "top": 0,
                                      "visibility": "hidden",
                                      "whiteSpace": "pre",
                                    }
                                  }
                                />
                              </div>
                            </Component>
                          </span>
                          <span
                            className="Select-arrow-zone"
                            onMouseDown={[Function]}
                          >
                            <span
                              className="Select-arrow"
                              onMouseDown={[Function]}
                            />
                          </span>
                        </div>
                      </div>
                    </Select>
                  </div>
                </div>
              </SearchableDropdown>
            </HearingCoordinatorDropdown>
          </Connect(HearingCoordinatorDropdown)>
          <HearingRoomDropdown
            label="Hearing Room"
            name="hearingRoomDropdown"
            onChange={[Function]}
          >
            <SearchableDropdown
              label="Hearing Room"
              loading={false}
              name="hearingRoomDropdown"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": "None",
                    "value": null,
                  },
                  Object {
                    "label": "1 (1W200A)",
                    "value": "1",
                  },
                  Object {
                    "label": "2 (1W200B)",
                    "value": "2",
                  },
                  Object {
                    "label": "3 (1W200C)",
                    "value": "3",
                  },
                  Object {
                    "label": "4 (1W424)",
                    "value": "4",
                  },
                  Object {
                    "label": "5 (1W428)",
                    "value": "5",
                  },
                  Object {
                    "label": "6 (1W432)",
                    "value": "6",
                  },
                  Object {
                    "label": "7 (1W434)",
                    "value": "7",
                  },
                  Object {
                    "label": "8 (1W435)",
                    "value": "8",
                  },
                  Object {
                    "label": "9 (1W436)",
                    "value": "9",
                  },
                  Object {
                    "label": "10 (1W437)",
                    "value": "10",
                  },
                  Object {
                    "label": "11 (1W438)",
                    "value": "11",
                  },
                  Object {
                    "label": "12 (1W439)",
                    "value": "12",
                  },
                  Object {
                    "label": "13 (1W440)",
                    "value": "13",
                  },
                ]
              }
              strongLabel={true}
              value={
                Object {
                  "label": null,
                  "value": null,
                }
              }
            >
              <div
                className="cf-form-dropdown dropdown-hearingRoomDropdown"
              >
                <label
                  className="question-label"
                  htmlFor="hearingRoomDropdown"
                >
                  <strong>
                    <span>
                      Hearing Room
                    </span>
                  </strong>
                </label>
                <div
                  className=""
                >
                  <Select
                    addLabelText="Add \\"{label}\\"?"
                    arrowRenderer={[Function]}
                    autosize={true}
                    backspaceRemoves={true}
                    backspaceToRemoveMessage="Press backspace to remove {label}"
                    cache={false}
                    clearAllText="Clear all"
                    clearRenderer={[Function]}
                    clearValueText="Clear value"
                    clearable={false}
                    deleteRemoves={true}
                    delimiter=","
                    disabled={false}
                    escapeClearsValue={true}
                    filterOptions={[Function]}
                    ignoreAccents={true}
                    ignoreCase={true}
                    inputProps={
                      Object {
                        "autoComplete": "off",
                        "id": "hearingRoomDropdown",
                      }
                    }
                    isLoading={false}
                    joinValues={false}
                    labelKey="label"
                    matchPos="any"
                    matchProp="any"
                    menuBuffer={0}
                    menuRenderer={[Function]}
                    multi={false}
                    noResultsText="Not an option"
                    onBlurResetsInput={false}
                    onChange={[Function]}
                    onCloseResetsInput={true}
                    optionComponent={[Function]}
                    options={
                      Array [
                        Object {
                          "label": "None",
                          "value": null,
                        },
                        Object {
                          "label": "1 (1W200A)",
                          "value": "1",
                        },
                        Object {
                          "label": "2 (1W200B)",
                          "value": "2",
                        },
                        Object {
                          "label": "3 (1W200C)",
                          "value": "3",
                        },
                        Object {
                          "label": "4 (1W424)",
                          "value": "4",
                        },
                        Object {
                          "label": "5 (1W428)",
                          "value": "5",
                        },
                        Object {
                          "label": "6 (1W432)",
                          "value": "6",
                        },
                        Object {
                          "label": "7 (1W434)",
                          "value": "7",
                        },
                        Object {
                          "label": "8 (1W435)",
                          "value": "8",
                        },
                        Object {
                          "label": "9 (1W436)",
                          "value": "9",
                        },
                        Object {
                          "label": "10 (1W437)",
                          "value": "10",
                        },
                        Object {
                          "label": "11 (1W438)",
                          "value": "11",
                        },
                        Object {
                          "label": "12 (1W439)",
                          "value": "12",
                        },
                        Object {
                          "label": "13 (1W440)",
                          "value": "13",
                        },
                      ]
                    }
                    pageSize={5}
                    placeholder="Select..."
                    required={false}
                    scrollMenuIntoView={true}
                    searchable={true}
                    shouldKeyDownEventCreateNewOption={[Function]}
                    simpleValue={false}
                    tabSelectsValue={true}
                    value={
                      Object {
                        "label": null,
                        "value": null,
                      }
                    }
                    valueComponent={[Function]}
                    valueKey="value"
                  >
                    <div
                      className="Select Select--single is-searchable has-value"
                    >
                      <div
                        className="Select-control"
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="Select-multi-value-wrapper"
                          id="react-select-10--value"
                        >
                          <Value
                            disabled={false}
                            id="react-select-10--value-item"
                            instancePrefix="react-select-10-"
                            onClick={null}
                            value={
                              Object {
                                "label": null,
                                "value": null,
                              }
                            }
                          >
                            <div
                              className="Select-value"
                            >
                              <span
                                aria-selected="true"
                                className="Select-value-label"
                                id="react-select-10--value-item"
                                role="option"
                              />
                            </div>
                          </Value>
                          <Component
                            aria-activedescendant="react-select-10--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            autoComplete="off"
                            className="Select-input"
                            id="hearingRoomDropdown"
                            minWidth="5"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            value=""
                          >
                            <div
                              className="Select-input"
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <style
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "input#undefined::-ms-clear {display: none;}",
                                  }
                                }
                              />
                              <input
                                aria-activedescendant="react-select-10--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                autoComplete="off"
                                id="hearingRoomDropdown"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                style={
                                  Object {
                                    "boxSizing": "content-box",
                                    "width": "5px",
                                  }
                                }
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </Component>
                        </span>
                        <span
                          className="Select-arrow-zone"
                          onMouseDown={[Function]}
                        >
                          <span
                            className="Select-arrow"
                            onMouseDown={[Function]}
                          />
                        </span>
                      </div>
                    </div>
                  </Select>
                </div>
              </div>
            </SearchableDropdown>
          </HearingRoomDropdown>
        </div>
        <div
          data-css-1fmltfu=""
        >
          <HearingTypeDropdown
            styling={
              Object {
                "data-css-vzv9iy": "",
              }
            }
          >
            <SearchableDropdown
              label="Hearing Type"
              loading={false}
              name="hearingType"
              onChange={[Function]}
              options={
                Array [
                  Object {
                    "label": undefined,
                    "value": false,
                  },
                  Object {
                    "label": "Virtual",
                    "value": true,
                  },
                ]
              }
              strongLabel={true}
              styling={
                Object {
                  "data-css-vzv9iy": "",
                }
              }
              value={
                Object {
                  "label": undefined,
                  "value": false,
                }
              }
            >
              <div
                className="cf-form-dropdown dropdown-hearingType"
                data-css-vzv9iy=""
              >
                <label
                  className="question-label"
                  htmlFor="hearingType"
                >
                  <strong>
                    <span>
                      Hearing Type
                    </span>
                  </strong>
                </label>
                <div
                  className=""
                >
                  <Select
                    addLabelText="Add \\"{label}\\"?"
                    arrowRenderer={[Function]}
                    autosize={true}
                    backspaceRemoves={true}
                    backspaceToRemoveMessage="Press backspace to remove {label}"
                    cache={false}
                    clearAllText="Clear all"
                    clearRenderer={[Function]}
                    clearValueText="Clear value"
                    clearable={false}
                    deleteRemoves={true}
                    delimiter=","
                    disabled={false}
                    escapeClearsValue={true}
                    filterOptions={[Function]}
                    ignoreAccents={true}
                    ignoreCase={true}
                    inputProps={
                      Object {
                        "autoComplete": "off",
                        "id": "hearingType",
                      }
                    }
                    isLoading={false}
                    joinValues={false}
                    labelKey="label"
                    matchPos="any"
                    matchProp="any"
                    menuBuffer={0}
                    menuRenderer={[Function]}
                    multi={false}
                    noResultsText="Not an option"
                    onBlurResetsInput={false}
                    onChange={[Function]}
                    onCloseResetsInput={true}
                    optionComponent={[Function]}
                    options={
                      Array [
                        Object {
                          "label": undefined,
                          "value": false,
                        },
                        Object {
                          "label": "Virtual",
                          "value": true,
                        },
                      ]
                    }
                    pageSize={5}
                    placeholder="Select..."
                    required={false}
                    scrollMenuIntoView={true}
                    searchable={true}
                    shouldKeyDownEventCreateNewOption={[Function]}
                    simpleValue={false}
                    tabSelectsValue={true}
                    value={
                      Object {
                        "label": undefined,
                        "value": false,
                      }
                    }
                    valueComponent={[Function]}
                    valueKey="value"
                  >
                    <div
                      className="Select Select--single is-searchable has-value"
                    >
                      <div
                        className="Select-control"
                        onKeyDown={[Function]}
                        onMouseDown={[Function]}
                        onTouchEnd={[Function]}
                        onTouchMove={[Function]}
                        onTouchStart={[Function]}
                      >
                        <span
                          className="Select-multi-value-wrapper"
                          id="react-select-11--value"
                        >
                          <Value
                            disabled={false}
                            id="react-select-11--value-item"
                            instancePrefix="react-select-11-"
                            onClick={null}
                            value={
                              Object {
                                "label": undefined,
                                "value": false,
                              }
                            }
                          >
                            <div
                              className="Select-value"
                            >
                              <span
                                aria-selected="true"
                                className="Select-value-label"
                                id="react-select-11--value-item"
                                role="option"
                              />
                            </div>
                          </Value>
                          <Component
                            aria-activedescendant="react-select-11--value"
                            aria-expanded="false"
                            aria-haspopup="false"
                            aria-owns=""
                            autoComplete="off"
                            className="Select-input"
                            id="hearingType"
                            minWidth="5"
                            onBlur={[Function]}
                            onChange={[Function]}
                            onFocus={[Function]}
                            required={false}
                            role="combobox"
                            value=""
                          >
                            <div
                              className="Select-input"
                              style={
                                Object {
                                  "display": "inline-block",
                                }
                              }
                            >
                              <style
                                dangerouslySetInnerHTML={
                                  Object {
                                    "__html": "input#undefined::-ms-clear {display: none;}",
                                  }
                                }
                              />
                              <input
                                aria-activedescendant="react-select-11--value"
                                aria-expanded="false"
                                aria-haspopup="false"
                                aria-owns=""
                                autoComplete="off"
                                id="hearingType"
                                onBlur={[Function]}
                                onChange={[Function]}
                                onFocus={[Function]}
                                required={false}
                                role="combobox"
                                style={
                                  Object {
                                    "boxSizing": "content-box",
                                    "width": "5px",
                                  }
                                }
                                value=""
                              />
                              <div
                                style={
                                  Object {
                                    "height": 0,
                                    "left": 0,
                                    "overflow": "scroll",
                                    "position": "absolute",
                                    "top": 0,
                                    "visibility": "hidden",
                                    "whiteSpace": "pre",
                                  }
                                }
                              />
                            </div>
                          </Component>
                        </span>
                        <span
                          className="Select-arrow-zone"
                          onMouseDown={[Function]}
                        >
                          <span
                            className="Select-arrow"
                            onMouseDown={[Function]}
                          />
                        </span>
                      </div>
                    </div>
                  </Select>
                </div>
              </div>
            </SearchableDropdown>
          </HearingTypeDropdown>
          <div />
          <div />
        </div>
        <div>
          <TextareaField
            disabled={false}
            name="Notes"
            onChange={[Function]}
            optional={false}
            required={false}
            strongLabel={true}
            styling={
              Object {
                "data-css-d0z96": "",
              }
            }
            value=""
          >
            <div
              className="cf-form-textarea"
              data-css-d0z96=""
            >
              <label
                className="question-label"
                htmlFor="Notes"
              >
                <strong>
                  <span>
                    Notes
                  </span>
                </strong>
              </label>
              <textarea
                disabled={false}
                id="Notes"
                name="Notes"
                onChange={[Function]}
                value=""
              />
            </div>
          </TextareaField>
        </div>
      </div>
    </div>
  </ContentSection>
  <VirtualHearingForm
    dispatch={[MockFunction]}
  />
</DetailsForm>
`;

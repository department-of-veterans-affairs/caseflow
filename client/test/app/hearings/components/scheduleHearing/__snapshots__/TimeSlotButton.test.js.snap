// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`TimeSlotButton Applies selected styling when selected is true 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <span>
        <button
          class="usa-button-secondary time-slot-button time-slot-button-selected usa-button"
          type="button"
        >
          <div>
            <div
              style="flex: 1;"
            >
              8:15 AM EDT
            </div>
            <div />
          </div>
        </button>
      </span>
    </div>
  </body>,
  "container": <div>
    <span>
      <button
        class="usa-button-secondary time-slot-button time-slot-button-selected usa-button"
        type="button"
      >
        <div>
          <div
            style="flex: 1;"
          >
            8:15 AM EDT
          </div>
          <div />
        </div>
      </button>
    </span>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`TimeSlotButton Displays full time details and is disabled when full is true 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <span>
        <button
          class="time-slot-button time-slot-button-full usa-button-disabled usa-button"
          disabled=""
          type="button"
        >
          <div>
            <div
              style="flex: 1;"
            >
              8:15 AM EDT
              <div
                class="time-slot-details"
                style="text-overflow: ellipsis; overflow: hidden;"
              >
                2 issues
                 
                <span
                  style="margin: 0px 0px;"
                >
                  路
                </span>
                 
                 
                 
                <span
                  style="margin: 0px 0px;"
                >
                  路
                </span>
                 
                <span
                  aria-describedby="tooltip-id"
                  aria-label=""
                  currentitem="false"
                  data-event="focus mouseenter"
                  data-event-off="mouseleave keydown"
                  data-for="tooltip-id"
                  data-tip="true"
                  tabindex="0"
                >
                  Something
                </span>
                <span
                  data-css-h1aqyj=""
                >
                  <div
                    class="__react_component_tooltip t00000000-0000-0000-0000-000000000000 place-bottom type-dark"
                    data-id="tooltip"
                    id="tooltip-id"
                    role="tooltip"
                  >
                    <style>
                      
  	.t00000000-0000-0000-0000-000000000000 {
	    color: #fff;
	    background: #222;
	    border: 1px solid transparent;
  	}

  	.t00000000-0000-0000-0000-000000000000.place-top {
        margin-top: -10px;
    }
    .t00000000-0000-0000-0000-000000000000.place-top::before {
        border-top: 8px solid transparent;
    }
    .t00000000-0000-0000-0000-000000000000.place-top::after {
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        bottom: -6px;
        left: 50%;
        margin-left: -8px;
        border-top-color: #222;
        border-top-style: solid;
        border-top-width: 6px;
    }

    .t00000000-0000-0000-0000-000000000000.place-bottom {
        margin-top: 10px;
    }
    .t00000000-0000-0000-0000-000000000000.place-bottom::before {
        border-bottom: 8px solid transparent;
    }
    .t00000000-0000-0000-0000-000000000000.place-bottom::after {
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        top: -6px;
        left: 50%;
        margin-left: -8px;
        border-bottom-color: #222;
        border-bottom-style: solid;
        border-bottom-width: 6px;
    }

    .t00000000-0000-0000-0000-000000000000.place-left {
        margin-left: -10px;
    }
    .t00000000-0000-0000-0000-000000000000.place-left::before {
        border-left: 8px solid transparent;
    }
    .t00000000-0000-0000-0000-000000000000.place-left::after {
        border-top: 5px solid transparent;
        border-bottom: 5px solid transparent;
        right: -6px;
        top: 50%;
        margin-top: -4px;
        border-left-color: #222;
        border-left-style: solid;
        border-left-width: 6px;
    }

    .t00000000-0000-0000-0000-000000000000.place-right {
        margin-left: 10px;
    }
    .t00000000-0000-0000-0000-000000000000.place-right::before {
        border-right: 8px solid transparent;
    }
    .t00000000-0000-0000-0000-000000000000.place-right::after {
        border-top: 5px solid transparent;
        border-bottom: 5px solid transparent;
        left: -6px;
        top: 50%;
        margin-top: -4px;
        border-right-color: #222;
        border-right-style: solid;
        border-right-width: 6px;
    }
  
                    </style>
                    Something
                  </div>
                </span>
              </div>
            </div>
            <div />
          </div>
        </button>
      </span>
    </div>
  </body>,
  "container": <div>
    <span>
      <button
        class="time-slot-button time-slot-button-full usa-button-disabled usa-button"
        disabled=""
        type="button"
      >
        <div>
          <div
            style="flex: 1;"
          >
            8:15 AM EDT
            <div
              class="time-slot-details"
              style="text-overflow: ellipsis; overflow: hidden;"
            >
              2 issues
               
              <span
                style="margin: 0px 0px;"
              >
                路
              </span>
               
               
               
              <span
                style="margin: 0px 0px;"
              >
                路
              </span>
               
              <span
                aria-describedby="tooltip-id"
                aria-label=""
                currentitem="false"
                data-event="focus mouseenter"
                data-event-off="mouseleave keydown"
                data-for="tooltip-id"
                data-tip="true"
                tabindex="0"
              >
                Something
              </span>
              <span
                data-css-h1aqyj=""
              >
                <div
                  class="__react_component_tooltip t00000000-0000-0000-0000-000000000000 place-bottom type-dark"
                  data-id="tooltip"
                  id="tooltip-id"
                  role="tooltip"
                >
                  <style>
                    
  	.t00000000-0000-0000-0000-000000000000 {
	    color: #fff;
	    background: #222;
	    border: 1px solid transparent;
  	}

  	.t00000000-0000-0000-0000-000000000000.place-top {
        margin-top: -10px;
    }
    .t00000000-0000-0000-0000-000000000000.place-top::before {
        border-top: 8px solid transparent;
    }
    .t00000000-0000-0000-0000-000000000000.place-top::after {
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        bottom: -6px;
        left: 50%;
        margin-left: -8px;
        border-top-color: #222;
        border-top-style: solid;
        border-top-width: 6px;
    }

    .t00000000-0000-0000-0000-000000000000.place-bottom {
        margin-top: 10px;
    }
    .t00000000-0000-0000-0000-000000000000.place-bottom::before {
        border-bottom: 8px solid transparent;
    }
    .t00000000-0000-0000-0000-000000000000.place-bottom::after {
        border-left: 8px solid transparent;
        border-right: 8px solid transparent;
        top: -6px;
        left: 50%;
        margin-left: -8px;
        border-bottom-color: #222;
        border-bottom-style: solid;
        border-bottom-width: 6px;
    }

    .t00000000-0000-0000-0000-000000000000.place-left {
        margin-left: -10px;
    }
    .t00000000-0000-0000-0000-000000000000.place-left::before {
        border-left: 8px solid transparent;
    }
    .t00000000-0000-0000-0000-000000000000.place-left::after {
        border-top: 5px solid transparent;
        border-bottom: 5px solid transparent;
        right: -6px;
        top: 50%;
        margin-top: -4px;
        border-left-color: #222;
        border-left-style: solid;
        border-left-width: 6px;
    }

    .t00000000-0000-0000-0000-000000000000.place-right {
        margin-left: 10px;
    }
    .t00000000-0000-0000-0000-000000000000.place-right::before {
        border-right: 8px solid transparent;
    }
    .t00000000-0000-0000-0000-000000000000.place-right::after {
        border-top: 5px solid transparent;
        border-bottom: 5px solid transparent;
        left: -6px;
        top: 50%;
        margin-top: -4px;
        border-right-color: #222;
        border-right-style: solid;
        border-right-width: 6px;
    }
  
                  </style>
                  Something
                </div>
              </span>
            </div>
          </div>
          <div />
        </div>
      </button>
    </span>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

exports[`TimeSlotButton Matches snapshot with default props 1`] = `
Object {
  "asFragment": [Function],
  "baseElement": <body>
    <div>
      <span>
        <button
          class="usa-button-secondary time-slot-button usa-button"
          type="button"
        >
          <div>
            <div
              style="flex: 1;"
            >
              8:15 AM EDT
            </div>
            <div>
              <i
                class="fa fa-angle-right time-slot-arrow"
              />
            </div>
          </div>
        </button>
      </span>
    </div>
  </body>,
  "container": <div>
    <span>
      <button
        class="usa-button-secondary time-slot-button usa-button"
        type="button"
      >
        <div>
          <div
            style="flex: 1;"
          >
            8:15 AM EDT
          </div>
          <div>
            <i
              class="fa fa-angle-right time-slot-arrow"
            />
          </div>
        </div>
      </button>
    </span>
  </div>,
  "debug": [Function],
  "findAllByAltText": [Function],
  "findAllByDisplayValue": [Function],
  "findAllByLabelText": [Function],
  "findAllByPlaceholderText": [Function],
  "findAllByRole": [Function],
  "findAllByTestId": [Function],
  "findAllByText": [Function],
  "findAllByTitle": [Function],
  "findByAltText": [Function],
  "findByDisplayValue": [Function],
  "findByLabelText": [Function],
  "findByPlaceholderText": [Function],
  "findByRole": [Function],
  "findByTestId": [Function],
  "findByText": [Function],
  "findByTitle": [Function],
  "getAllByAltText": [Function],
  "getAllByDisplayValue": [Function],
  "getAllByLabelText": [Function],
  "getAllByPlaceholderText": [Function],
  "getAllByRole": [Function],
  "getAllByTestId": [Function],
  "getAllByText": [Function],
  "getAllByTitle": [Function],
  "getByAltText": [Function],
  "getByDisplayValue": [Function],
  "getByLabelText": [Function],
  "getByPlaceholderText": [Function],
  "getByRole": [Function],
  "getByTestId": [Function],
  "getByText": [Function],
  "getByTitle": [Function],
  "queryAllByAltText": [Function],
  "queryAllByDisplayValue": [Function],
  "queryAllByLabelText": [Function],
  "queryAllByPlaceholderText": [Function],
  "queryAllByRole": [Function],
  "queryAllByTestId": [Function],
  "queryAllByText": [Function],
  "queryAllByTitle": [Function],
  "queryByAltText": [Function],
  "queryByDisplayValue": [Function],
  "queryByLabelText": [Function],
  "queryByPlaceholderText": [Function],
  "queryByRole": [Function],
  "queryByTestId": [Function],
  "queryByText": [Function],
  "queryByTitle": [Function],
  "rerender": [Function],
  "unmount": [Function],
}
`;

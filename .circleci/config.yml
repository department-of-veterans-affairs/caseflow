version: 2
jobs:
  build:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: circleci/ruby:2.2-browsers
        environment:
          - RAILS_ENV: test
          - BUNDLE_PATH: vendor/bundle
          - COVERAGE_DIR: /home/circleci/coverage
          - POSTGRES_HOST: localhost
          - POSTGRES_USER: root
      # This is the circleci provided Postgres container. We can
      # configure it via environment variables.
      - image: circleci/postgres:10.2
        environment:
          - POSTGRES_USER: root
            POSTGRES_DB: caseflow_certification_test

      # This is the circleci provided Redis container.
      - image: circleci/redis:4.0.8
    parallelism: 1
    steps:
      - checkout

      - run:
          name: Setup prereqs
          command: ci-bin/setup-circleci-prereqs

      - restore_cache:
          name: Restore bundler cache
          key: vendor-bundle-{{ checksum "Gemfile.lock" }}

      - restore_cache:
          name: Restore yarn cache
          key: dot-cache-yarn-{{ checksum "client/yarn.lock" }}

      - run:
          name: bundle install
          command: bundle check || bundle install --deployment --without production staging ssh_forwarding local

      - save_cache:
          key: vendor-bundle-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      - run:
          name: yarn install
          command: cd client && yarn install --frozen-lockfile

      - save_cache:
          key: dot-cache-yarn-{{ checksum "client/yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: RSpec
          command: |
            mkdir -p ~/test-results/rspec
            testfiles=$(circleci tests glob "spec/**/*.rb" | circleci tests split --split-by timings)
            bundle exec rspec --no-color --format progress --format RspecJunitFormatter -o ~/test-results/rspec/rspec.xml -- ${testfiles}

      - run:
          name: Mocha
          command: |
            bundle exec rake mocha

      - store_test_results:
          path: ~/test-results

      - store_artifacts:
          name: Store code coverage
          path: ~/coverage

      - store_artifacts:
          name: Store capybara screenshots
          path: ~/project/tmp/capybara

      - deploy:
          name: Lint
          command: |
            bundle exec rake lint

      - deploy:
          name: Security
          command: |
            bundle exec rake security_caseflow

      - deploy:
          name: Verify code coverage
          command: |
            bundle exec rake ci:circleci_verify_code_coverage

version: 2.1

commands:
  install_ruby_dependencies:
    description: "Install Ruby Dependencies"
    steps:
      - run:
          name: Ruby version
          command: ruby -v

      - run:
          name: Configure Bundler
          command: |
            echo 'export BUNDLER_VERSION=$(cat Gemfile.lock | tail -1 | tr -d " ")' >> $BASH_ENV
            source $BASH_ENV
            gem install bundler

      - restore_cache:
          keys:
            - vendor-bundle-v2-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum "Gemfile.lock" }}

      - run:
          name: Bundle install
          command: bundle install --path vendor/bundle

      - save_cache:
          key: vendor-bundle-v2-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/project/vendor/bundle

  install_node_dependencies:
    description: "Install NodeJS Dependencies"
    steps:
      - restore_cache:
          name: Restore yarn cache
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}

      - run:
          name: yarn install
          command: ~/project/ci-bin/capture-log "cd client && yarn install --frozen-lockfile"

      - save_cache:
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - public/assets
            - tmp/cache/assets/sprockets

  install_dockerize:
    description: "Install Dockerize"
    steps:
      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

  wait_for_databases:
    description: "Wait for FACOLS and PostgreSQL"
    steps:
      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Wait for FACOLS to be ready
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake local:vacols:wait_for_connection"
          environment:
            DISABLE_FACTORY_BOT_INITIALIZERS: 1

jobs:
  # build workspace
  build_workspace:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: cimg/node:12.3.0 # NodeJS Version defined in ./nvmrc
        environment:
          - DBUS_SESSION_BUS_ADDRESS: /dev/null
          - RAILS_ENV: test
          - NODE_ENV: test
    resource_class: large
    steps:
      - checkout

      - install_node_dependencies

      - run:
          name: Build webpack
          command: ~/project/ci-bin/capture-log "cd client && yarn build:test"

      - persist_to_workspace:
          root: .
          paths:
            - .

  # validate our demo/development setup
  demo:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/circleci:2.7.3-node-browsers
        environment:
          - DBUS_SESSION_BUS_ADDRESS: /dev/null
          - RAILS_ENV: test
          - NODE_ENV: test
          - BUNDLE_PATH: vendor/bundle
          - COVERAGE_DIR: /home/circleci/coverage
          - POSTGRES_HOST: localhost
          - POSTGRES_USER: root
      # This is the circleci provided Postgres container. We can
      # configure it via environment variables.
      - image: circleci/postgres:11.7
        environment:
          - POSTGRES_USER: root
            POSTGRES_PASSWORD: password
            POSTGRES_DB: caseflow_certification_test

      # This is our homespun VACOLS container. An oracle db with some special sauce.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/facols:latest

      # This is the circleci provided Redis container.
      - image: circleci/redis:4.0.10
    resource_class: large
    steps:
      - checkout

      - run:
          name: Setup testfiles directory
          command: ~/project/ci-bin/capture-log "mkdir -p ~/project/tmp/testfiles"

      - install_node_dependencies

      - install_ruby_dependencies

      - install_dockerize

      - wait_for_databases

      - run:
          name: Database setup
          command: |
            ~/project/ci-bin/capture-log "DB=etl bundle exec rake db:create db:schema:load db:migrate"
            ~/project/ci-bin/capture-log "bundle exec rake db:create db:schema:load db:migrate"

      - run:
          name: make seed-dbs
          command: |
            ~/project/ci-bin/capture-log "make -f Makefile.example seed-dbs"

      - run:
          name: Assets Precompile
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake assets:precompile"

      - store_artifacts:
          name: Store test results as artifact
          path: ~/test-results

      - store_artifacts:
          name: Store run logs
          path: ~/logs

  rspec:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/circleci:2.7.3-node-browsers
        environment:
          - DBUS_SESSION_BUS_ADDRESS: /dev/null
          - RAILS_ENV: test
          - NODE_ENV: test
          - BUNDLE_PATH: vendor/bundle
          - COVERAGE_DIR: /home/circleci/coverage
          - POSTGRES_HOST: localhost
          - POSTGRES_USER: root
      # This is the circleci provided Postgres container. We can
      # configure it via environment variables.
      - image: circleci/postgres:11.7
        environment:
          - POSTGRES_USER: root
            POSTGRES_PASSWORD: password
            POSTGRES_DB: caseflow_certification_test

      # This is our homespun VACOLS container. An oracle db with some special sauce.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/facols:latest

      # This is the circleci provided Redis container.
      - image: circleci/redis:4.0.10
    parallelism: 12
    resource_class: large
    steps:
      - attach_workspace:
          at: .

      - run:
          name: Setup testfiles directory
          command: ~/project/ci-bin/capture-log "mkdir -p ~/project/tmp/testfiles"

      - install_ruby_dependencies

      - install_dockerize

      - wait_for_databases

      - run:
          name: Database setup
          command: |
            ~/project/ci-bin/capture-log "DB=etl bundle exec rake db:create db:schema:load db:migrate:redo"
            ~/project/ci-bin/capture-log "bundle exec rake db:create db:schema:load db:migrate:redo"

      - run:
          name: FACOLS test setup
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake spec:setup_vacols"

      - run:
          name: RSpec via knapsack_pro Queue Mode
          command: |
            mkdir -p ~/test-results/rspec
            export RAILS_ENV=test
            bundle exec rake "knapsack_pro:queue:rspec[--format documentation --no-color --format RspecJunitFormatter --out tmp/rspec.xml]"
          environment:
            KNAPSACK_PRO_RSPEC_SPLIT_BY_TEST_EXAMPLES: true
            # Uncomment to profile test performance in CircleCI
            #  RDOC: 1
            #  RD_PROF: 1
            #  FPROF: 1

      - store_test_results:
          name: Store test results as summary
          path: ~/test-results

      - store_artifacts:
          name: Store test results as artifact
          path: ~/test-results

      - store_artifacts:
          name: Store code coverage
          path: ~/coverage

      - store_artifacts:
          name: Store capybara screenshots
          path: ~/project/tmp/capybara

      - store_artifacts:
          name: Store rails test log
          path: ~/project/log/test.log

      - store_artifacts:
          name: Store bullet log
          path: ~/project/log/bullet.log

      - store_artifacts:
          name: Store run logs
          path: ~/logs

      - deploy:
          name: Verify code coverage
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake ci:circleci_verify_code_coverage"

      - deploy:
          name: Concatenate all logs
          command: |
            ~/project/ci-bin/concatenate-log.rb >> ~/all_logs.log
          when: always

      - store_artifacts:
          name: Store concatenated logs
          path: ~/all_logs.log

      - store_artifacts:
          name: Store final coverage
          path: ~/coverage/combined

  lint:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/circleci:2.7.3-node-browsers
        environment:
          - DBUS_SESSION_BUS_ADDRESS: /dev/null
    steps:
      - checkout

      - install_ruby_dependencies

      - install_node_dependencies

      - run:
          name: Danger
          command: |
            ~/project/ci-bin/capture-log "bundle exec danger"

      - run:
          name: Lint
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake lint"

      - run:
          name: Security
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake security"

      - deploy:
          name: Concatenate all logs
          command: |
            ~/project/ci-bin/concatenate-log.rb >> ~/all_logs.log
          when: always

      - store_artifacts:
          name: Store concatenated logs
          path: ~/all_logs.log

  js_tests:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: circleci/ruby:2.7.3-node-browsers # NodeJS Version defined in ./nvmrc
        environment:
          - DBUS_SESSION_BUS_ADDRESS: /dev/null
          - NODE_ENV: test
          - JEST_DIR: /home/circleci/test-results/jest
          - TEST_REPORTER: jest-junit
          - JEST_JUNIT_OUTPUT_DIR: /home/circleci/test-results/jest
          - KARMA_JUNIT_OUTPUT_DIR: /home/circleci/test-results/karma
          - KARMA_JUNIT_OUTPUT_FILE: /home/circleci/test-results/karma/karma.xml
          - COVERAGE_DIR: /home/circleci/coverage
    resource_class: large
    steps:
      - checkout

      - install_node_dependencies

      - run:
          name: Jest
          command: |
            mkdir -p ~/test-results/jest
            pushd client
            ~/project/ci-bin/capture-log "node_modules/.bin/jest --ci --reporters=default --reporters=jest-junit --maxWorkers=4"

      - run:
          name: Karma
          command: |
            mkdir -p ~/test-results/karma
            pushd client
            ~/project/ci-bin/capture-log "node_modules/.bin/karma start --reporters junit,dots"

      - store_test_results:
          name: Store test results as summary
          path: ~/test-results

      - store_artifacts:
          name: Store test results as artifact
          path: ~/test-results

      - deploy:
          name: Concatenate all logs
          command: |
            ~/project/ci-bin/concatenate-log.rb >> ~/all_logs.log
          when: always

      - store_artifacts:
          name: Store concatenated logs
          path: ~/all_logs.log

workflows:
  version: 2
  build:
    jobs:
      - build_workspace
      - demo
      - rspec:
          requires:
            - build_workspace
      - js_tests
      - lint

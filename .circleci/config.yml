version: 2.1
jobs:
  rspec:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/circleci:2.5.3-node-browsers
        environment:
          - DBUS_SESSION_BUS_ADDRESS: /dev/null
          - RAILS_ENV: test
          - NODE_ENV: test
          - BUNDLE_PATH: vendor/bundle
          - COVERAGE_DIR: /home/circleci/coverage
          - POSTGRES_HOST: localhost
          - POSTGRES_USER: root
      # This is the circleci provided Postgres container. We can
      # configure it via environment variables.
      - image: circleci/postgres:9.6
        environment:
          - POSTGRES_USER: root
            POSTGRES_PASSWORD: password
            POSTGRES_DB: caseflow_certification_test

      # This is our homespun VACOLS container. An oracle db with some special sauce.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/facols:latest

      # This is the circleci provided Redis container.
      - image: circleci/redis:4.0.10
    parallelism: 5
    resource_class: large
    steps:
      - checkout

      - run:
          name: Setup testfiles directory
          command: ~/project/ci-bin/capture-log "mkdir -p ~/project/tmp/testfiles"

      - run:
          name: Ruby version
          command: ruby -v

      - restore_cache:
          keys:
            - vendor-bundle-v2-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum "Gemfile.lock" }}

      - run:
          name: Bundle install
          command: bundle install --path vendor/bundle

      - save_cache:
          key: vendor-bundle-v2-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/project/vendor/bundle

      - restore_cache:
          name: Restore yarn cache
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}

      - run:
          name: yarn install
          command: ~/project/ci-bin/capture-log "cd client && yarn install --frozen-lockfile"

      - run:
          name: Assets Precompile
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake assets:precompile"

      - save_cache:
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}
          paths:
            - ~/.cache/yarn
            - public/assets
            - tmp/cache/assets/sprockets

      - run:
          name: install dockerize
          command: wget https://github.com/jwilder/dockerize/releases/download/$DOCKERIZE_VERSION/dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && sudo tar -C /usr/local/bin -xzvf dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz && rm dockerize-linux-amd64-$DOCKERIZE_VERSION.tar.gz
          environment:
            DOCKERIZE_VERSION: v0.6.1

      - run:
          name: Wait for database
          command: dockerize -wait tcp://localhost:5432 -timeout 1m

      - run:
          name: Database setup
          command: |
            ~/project/ci-bin/capture-log "DB=etl bundle exec rake db:create db:schema:load db:migrate:redo"
            ~/project/ci-bin/capture-log "bundle exec rake db:create db:schema:load db:migrate:redo"

      - run:
          name: Wait for FACOLS to be ready
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake local:vacols:wait_for_connection"

      - run:
          name: FACOLS test setup
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake spec:setup_vacols"

      - run:
          name: RSpec
          command: |
            mkdir -p ~/test-results/rspec
            testfiles=$(circleci tests glob "spec/**/*spec.rb" | circleci tests split --split-by=timings)
            echo $testfiles > ~/project/tmp/testfiles/rspec_testfiles.txt
            ~/project/ci-bin/capture-log "bundle exec rspec --no-color --format documentation --format RspecJunitFormatter -o ~/test-results/rspec/rspec.xml -- ${testfiles}"

      - store_test_results:
          name: Store test results as summary
          path: ~/test-results

      - store_artifacts:
          name: Store test results as artifact
          path: ~/test-results

      - store_artifacts:
          name: Store code coverage
          path: ~/coverage

      - store_artifacts:
          name: Store capybara screenshots
          path: ~/project/tmp/capybara

      - store_artifacts:
          name: Store rails test log
          path: ~/project/log/test.log

      - store_artifacts:
          name: Store bullet log
          path: ~/project/log/bullet.log

      - store_artifacts:
          name: Store testfile ordering
          path: ~/project/tmp/testfiles

      - store_artifacts:
          name: Store run logs
          path: ~/logs

      - deploy:
          name: Verify code coverage
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake ci:circleci_verify_code_coverage"

      - deploy:
          name: Concatenate all logs
          command: |
            ~/project/ci-bin/concatenate-log.rb >> ~/all_logs.log
          when: always

      - store_artifacts:
          name: Store concatenated logs
          path: ~/all_logs.log

      - store_artifacts:
          name: Store final coverage
          path: ~/coverage/combined

  lint:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/circleci:2.5.3-node-browsers
        environment:
          - DBUS_SESSION_BUS_ADDRESS: /dev/null
    steps:
      - checkout

      - restore_cache:
          keys:
            - vendor-bundle-v2-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum "Gemfile.lock" }}

      - run:
          name: Bundle install
          command: bundle install --path vendor/bundle

      - save_cache:
          key: vendor-bundle-v2-{{ arch }}-{{ checksum ".ruby-version" }}-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/project/vendor/bundle

      - restore_cache:
          name: Restore yarn cache
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}

      - run:
          name: yarn install
          command: ~/project/ci-bin/capture-log "cd client && yarn install --frozen-lockfile"

      - save_cache:
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Danger
          command: |
            ~/project/ci-bin/capture-log "bundle exec danger"

      - run:
          name: Lint
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake lint"

      - run:
          name: Security
          command: |
            ~/project/ci-bin/capture-log "bundle exec rake security"

      - deploy:
          name: Concatenate all logs
          command: |
            ~/project/ci-bin/concatenate-log.rb >> ~/all_logs.log
          when: always

      - store_artifacts:
          name: Store concatenated logs
          path: ~/all_logs.log

  js_tests:
    docker:
      # The first image listed is the image that all steps run inside of.
      # This can be modified by steps, or can be built as a separate
      # customized container.
      - image: 008577686731.dkr.ecr.us-gov-west-1.amazonaws.com/circleci:2.5.3-node-browsers
        environment:
          - DBUS_SESSION_BUS_ADDRESS: /dev/null
          - NODE_ENV: test
          - MOCHA_FILE: /home/circleci/test-results/mocha/mocha.xml
          - KARMA_JUNIT_OUTPUT_DIR: /home/circleci/karma-test-results/karma
          - KARMA_JUNIT_OUTPUT_FILE: /home/circleci/karma-test-results/karma/karma.xml
          - COVERAGE_DIR: /home/circleci/coverage
    resource_class: large
    steps:
      - checkout

      - restore_cache:
          name: Restore yarn cache
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}

      - run:
          name: yarn install
          command: ~/project/ci-bin/capture-log "cd client && yarn install --frozen-lockfile"

      - save_cache:
          key: dot-cache-yarn-v2-{{ arch }}-{{ checksum "client/yarn.lock" }}
          paths:
            - ~/.cache/yarn

      - run:
          name: Mocha
          command: |
            mkdir -p ~/test-results/mocha
            pushd client
            ~/project/ci-bin/capture-log "node_modules/.bin/mocha --reporter mocha-junit-reporter --recursive --require ./test/node/register.js --require ./test/node/setup.js 'test/node/**/*-test.js'"

      - run:
          name: Karma
          command: |
            mkdir -p ~/test-results/karma
            pushd client
            ~/project/ci-bin/capture-log "node_modules/.bin/karma start --reporters junit"

      - store_test_results:
          name: Store test results as summary
          path: ~/test-results

      - store_artifacts:
          name: Store test results as artifact
          path: ~/test-results

      - deploy:
          name: Concatenate all logs
          command: |
            ~/project/ci-bin/concatenate-log.rb >> ~/all_logs.log
          when: always

      - store_artifacts:
          name: Store concatenated logs
          path: ~/all_logs.log

workflows:
  version: 2
  build:
    jobs:
      - rspec
      - js_tests
      - lint

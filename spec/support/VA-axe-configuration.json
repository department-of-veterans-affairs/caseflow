{
 "rules": [
  {
   "id": "accesskeys",
   "selector": "[accesskey]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "accesskeys"
   ],
   "tags": [
    "wcag2a",
    "wcag211",
    "section508",
    "section508.22.n"
   ]
  },
  {
   "id": "area-alt",
   "selector": "map area[href]",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-alt"
   ],
   "all": [],
   "none": [],
   "tags": [
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "audio-caption",
   "selector": "audio",
   "excludeHidden": false,
   "enabled": false,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "caption"
   ],
   "tags": [
    "wcag2a",
    "wcag122",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "blink",
   "selector": "blink",
   "excludeHidden": false,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "is-on-screen"
   ],
   "tags": [
    "wcag2a",
    "wcag222",
    "section508",
    "section508.22.j"
   ]
  },
  {
   "id": "button-name",
   "selector": "button, [role=\"button\"], input[type=\"button\"], input[type=\"submit\"], input[type=\"reset\"]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-if-present",
    "non-empty-value",
    "button-has-visible-text"
   ],
   "all": [],
   "none": [
    "focusable-no-name"
   ],
   "tags": [
    "wcag2a",
    "wcag412",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "bypass",
   "selector": "html",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": true,
   "any": [
    "internal-link-present",
    "header-present",
    "landmark"
   ],
   "all": [],
   "none": [],
   "tags": [
    "wcag2a",
    "wcag241",
    "section508",
    "section508.22.o"
   ],
   "matches": "function matches(node) {\n        return !!node.querySelector('a[href]');\n      }"
  },
  {
   "id": "frame-title",
   "selector": "frame, iframe",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-title"
   ],
   "all": [],
   "none": [],
   "tags": [
    "wcag2a",
    "wcag241",
    "section508",
    "section508.22.i"
   ]
  },
  {
   "id": "image-alt",
   "selector": "img",
   "excludeHidden": true,
   "enabled": false,
   "pageLevel": false,
   "any": [
    "has-alt",
    "aria-label",
    "aria-labelledby",
    "non-empty-title",
    "role-presentation",
    "role-none"
   ],
   "all": [],
   "none": [],
   "tags": [
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "input-image-alt",
   "selector": "input[type=\"image\"]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "non-empty-alt"
   ],
   "all": [],
   "none": [],
   "tags": [
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ],
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/input-image-alt?application=fireeyesFirefox",
    "description": "Ensures that the text equivalent for button exists and is not empty",
    "help": "Text equivalent for button is missing or empty"
   }
  },
  {
   "id": "label",
   "selector": "input:not([type='hidden']):not([type='image']):not([type='button']):not([type='submit']):not([type='reset']), select, textarea",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "explicit-fixed"
   ],
   "all": [],
   "none": [
    "help-same-as-label",
    "multiple-label"
   ],
   "tags": [
    "wcag2a",
    "wcag332",
    "wcag131",
    "section508",
    "section508.22.n"
   ]
  },
  {
   "id": "layout-table",
   "selector": "table",
   "excludeHidden": true,
   "enabled": false,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "has-th",
    "has-caption",
    "has-summary"
   ],
   "tags": [
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g",
    "section508.22.h"
   ],
   "matches": "function matches(node) {\n        return !axe.commons.table.isDataTable(node);\n      }"
  },
  {
   "id": "link-name",
   "selector": "a[href]:not([role=\"button\"]), [role=link][href]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [
    "has-visible-text"
   ],
   "all": [],
   "none": [
    "focusable-no-name"
   ],
   "tags": [
    "wcag2a",
    "wcag111",
    "wcag412",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "object-alt",
   "selector": "object",
   "excludeHidden": true,
   "enabled": false,
   "pageLevel": false,
   "any": [
    "has-visible-text"
   ],
   "all": [],
   "none": [
    "invalid-image-alt-text",
    "invalid-ascii-art"
   ],
   "tags": [
    "wcag2a",
    "wcag111",
    "section508",
    "section508.22.a"
   ],
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/object-alt?application=fireeyesFirefox",
    "description": "<object> elements must have a text alternative",
    "help": "<object> element does not have a text alternative"
   }
  },
  {
   "id": "server-side-image-map",
   "selector": "img[ismap]",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "exists"
   ],
   "tags": [
    "wcag2a",
    "wcag211",
    "section508",
    "section508.22.f"
   ]
  },
  {
   "id": "table-duplicate-name",
   "selector": "table",
   "excludeHidden": true,
   "enabled": false,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "same-caption-summary"
   ],
   "tags": [
    "section508",
    "section508.22.g",
    "section508.22.h"
   ]
  },
  {
   "id": "table-fake-caption",
   "selector": "table",
   "excludeHidden": true,
   "enabled": false,
   "pageLevel": false,
   "any": [],
   "all": [
    "caption-faked"
   ],
   "none": [],
   "tags": [
    "experimental",
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        return axe.commons.table.isDataTable(node);\n      }"
  },
  {
   "id": "td-has-header",
   "selector": "table",
   "excludeHidden": true,
   "enabled": false,
   "pageLevel": false,
   "any": [],
   "all": [
    "td-has-header"
   ],
   "none": [],
   "tags": [
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        if (axe.commons.table.isDataTable(node)) {\n          var tableArray = axe.commons.table.toArray(node);\n          return tableArray.length >= 3 && tableArray[0].length >= 3 && tableArray[1].length >= 3 && tableArray[2].length >= 3;\n        }\n        return false;\n      }"
  },
  {
   "id": "td-headers-attr",
   "selector": "table",
   "excludeHidden": true,
   "enabled": true,
   "pageLevel": false,
   "any": [],
   "all": [
    "td-headers-attr"
   ],
   "none": [],
   "tags": [
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ]
  },
  {
   "id": "th-has-data-cells",
   "selector": "table",
   "excludeHidden": true,
   "enabled": false,
   "pageLevel": false,
   "any": [],
   "all": [
    "th-has-data-cells"
   ],
   "none": [],
   "tags": [
    "wcag2a",
    "wcag131",
    "section508",
    "section508.22.g"
   ],
   "matches": "function matches(node) {\n        return axe.commons.table.isDataTable(node);\n      }"
  },
  {
   "id": "video-caption",
   "selector": "video",
   "excludeHidden": false,
   "enabled": false,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "caption"
   ],
   "tags": [
    "wcag2a",
    "wcag122",
    "wcag123",
    "section508",
    "section508.22.a"
   ]
  },
  {
   "id": "video-description",
   "selector": "video",
   "excludeHidden": false,
   "enabled": false,
   "pageLevel": false,
   "any": [],
   "all": [],
   "none": [
    "description"
   ],
   "tags": [
    "wcag2aa",
    "wcag125",
    "section508",
    "section508.22.b"
   ]
  },
  {
   "id": "aria-allowed-attr",
   "enabled": false
  },
  {
   "id": "aria-required-attr",
   "enabled": false
  },
  {
   "id": "aria-required-children",
   "enabled": false
  },
  {
   "id": "aria-required-parent",
   "enabled": false
  },
  {
   "id": "aria-roles",
   "enabled": false
  },
  {
   "id": "aria-valid-attr-value",
   "enabled": false
  },
  {
   "id": "aria-valid-attr",
   "enabled": false
  },
  {
   "id": "checkboxgroup",
   "enabled": false
  },
  {
   "id": "color-contrast",
   "enabled": false
  },
  {
   "id": "definition-list",
   "enabled": false
  },
  {
   "id": "dlitem",
   "enabled": false
  },
  {
   "id": "document-title",
   "enabled": false
  },
  {
   "id": "duplicate-id",
   "enabled": false
  },
  {
   "id": "empty-heading",
   "enabled": false
  },
  {
   "id": "frame-title-unique",
   "enabled": false
  },
  {
   "id": "heading-order",
   "enabled": false
  },
  {
   "id": "html-has-lang",
   "enabled": false
  },
  {
   "id": "html-lang-valid",
   "enabled": false
  },
  {
   "id": "image-redundant-alt",
   "enabled": false
  },
  {
   "id": "label-title-only",
   "enabled": false
  },
  {
   "id": "link-in-text-block",
   "enabled": false
  },
  {
   "id": "list",
   "enabled": false
  },
  {
   "id": "listitem",
   "enabled": false
  },
  {
   "id": "marquee",
   "enabled": false
  },
  {
   "id": "meta-refresh",
   "enabled": false
  },
  {
   "id": "meta-viewport-large",
   "enabled": false
  },
  {
   "id": "meta-viewport",
   "enabled": false
  },
  {
   "id": "radiogroup",
   "enabled": false
  },
  {
   "id": "region",
   "enabled": false
  },
  {
   "id": "scope-attr-valid",
   "enabled": false
  },
  {
   "id": "skip-link",
   "enabled": false
  },
  {
   "id": "tabindex",
   "enabled": false
  },
  {
   "id": "valid-lang",
   "enabled": false
  },
  {
   "id": "active-embed",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/active-embed?application=fireeyesFirefox",
    "description": "Raises a potential violation for all potentially active <embed> tags",
    "help": "Check the <embed> media to ensure that it has captions"
   },
   "tags": [
    "section508",
    "section508.22.a.potential"
   ],
   "selector": "embed",
   "any": [
    "active-embed"
   ],
   "all": [],
   "none": []
  },
  {
   "id": "applet-ascii-alt",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/applet-ascii-alt?application=fireeyesFirefox",
    "description": "Ensures <applet> elements have a meaningful alternate text (not ascii art)",
    "help": "Suspicious text equivalent for applet - could be ASCII art"
   },
   "tags": [
    "section508",
    "section50.22.a"
   ],
   "selector": "applet",
   "any": [],
   "all": [],
   "none": [
    "invalid-ascii-art"
   ]
  },
  {
   "id": "applet-meaningful-alt",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/applet-meaningful-alt?application=fireeyesFirefox",
    "description": "Ensures <applet> elements have a meaningful alternate text",
    "help": "When an alt is supplied on applet, it must be meaningful (i.e. not a file name, size or meaningless value)."
   },
   "tags": [
    "section508",
    "section50.22.a"
   ],
   "selector": "applet",
   "any": [],
   "all": [],
   "none": [
    "invalid-image-alt-text",
    "invalid-image-alt-filename",
    "blank-alt"
   ]
  },
  {
   "id": "applet",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/applet?application=fireeyesFirefox",
    "description": "Ensures <applet> elements have alternate text",
    "help": "Applet must have valid alt attribute or accessible HTML content"
   },
   "tags": [
    "section508",
    "section50.22.a"
   ],
   "selector": "applet",
   "any": [
    "has-visible-text",
    "non-empty-alt"
   ],
   "all": []
  },
  {
   "id": "area-alt-meaningful",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/area-alt-meaningful?application=fireeyesFirefox",
    "description": "Ensure that the alt attribute on area elements has a meaningful value",
    "help": "When an alt is supplied on area, it must be meaningful (i.e. not a file name or meaningless value)"
   },
   "tags": [
    "section508",
    "section508.22.a"
   ],
   "selector": "map area[href]",
   "excludeHidden": false,
   "any": [],
   "all": [],
   "none": [
    "invalid-image-alt-text",
    "invalid-image-alt-filename"
   ]
  },
  {
   "id": "area-alt-suspicious",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/area-alt-suspicious?application=fireeyesFirefox",
    "description": "Ensure that text equivalent cannot be ASCII art",
    "help": "Suspicious alt attribute for area - could be ASCII art"
   },
   "tags": [
    "section508",
    "section508.22.a"
   ],
   "selector": "map area[href]",
   "excludeHidden": false,
   "any": [],
   "all": [],
   "none": [
    "invalid-ascii-art"
   ]
  },
  {
   "id": "area-alt-unique",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/area-alt-unique?application=fireeyesFirefox",
    "description": "Ensures image maps do not have duplicate alts",
    "help": "Each alt text in an image map must be unique"
   },
   "tags": [
    "section508",
    "section508.22.a"
   ],
   "selector": "img[usemap]",
   "any": [
    "area-alt-unique"
   ],
   "all": [],
   "none": []
  },
  {
   "id": "color-contrast-critical",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/color-contrast?application=fireeyesFirefox",
    "description": "Ensures the contrast between foreground and background colors is above 4:1",
    "help": "Elements must have a contrast ratio of above 4.5:1"
   },
   "tags": [
    "wcag2aa",
    "wcag143",
    "section508"
   ],
   "selector": "*",
   "excludeHidden": false,
   "any": [
    "color-contrast-critical"
   ],
   "all": [],
   "none": []
  },
  {
   "id": "color-contrast-minor",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/color-contrast?application=fireeyesFirefox",
    "description": "Ensures the contrast between foreground and background colors is above 4.5:1",
    "help": "Elements must have a contrast ratio of above 4.5:1"
   },
   "tags": [
    "wcag2aa",
    "wcag143",
    "section508"
   ],
   "selector": "*",
   "excludeHidden": false,
   "any": [
    "color-contrast-minor"
   ],
   "all": [],
   "none": []
  },
  {
   "id": "data-table-caption",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/data-table-caption?application=fireeyesFirefox",
    "description": "Ensures data tables have a <caption>",
    "help": "Data tables must have a <caption>"
   },
   "tags": [
    "section508",
    "section508.22.g",
    "section508.22.h"
   ],
   "selector": "table",
   "any": [],
   "all": [
    "has-caption",
    "caption-not-empty"
   ],
   "none": [],
   "matches": "function matches(node) {\nreturn axe.commons.table.isDataTable(node);\n}\n"
  },
  {
   "id": "direct-media-link",
   "enabled": false,
   "metadata": {
    "description": "Ensures media files have a text equivalent",
    "help": "Media file may be missing a text equivalent"
   },
   "tags": [
    "section508",
    "section508.22.a",
    "section508.22.b"
   ],
   "selector": "a[href]",
   "any": [],
   "all": [],
   "none": [
    "direct-audio-href",
    "direct-video-href"
   ]
  },
  {
   "id": "fieldset-legend",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/fieldset-legend?application=fireeyesFirefox",
    "description": "Ensures <fieldset> elements have a non-empty <legend> as the first child",
    "help": "<fieldset> elements must have a non-empty <legend> element as the first child"
   },
   "tags": [
    "section508",
    "section508.22.n"
   ],
   "selector": "fieldset",
   "any": [],
   "all": [],
   "none": [
    "fieldset-legend",
    "fieldset-legend-text"
   ]
  },
  {
   "id": "form-id-unique",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/form-id-unique?application=fireeyesFirefox",
    "description": "Ensures every form element with an ID has a unique ID",
    "help": "Form elements IDs must be unique"
   },
   "tags": [
    "section508",
    "section508.22.n"
   ],
   "selector": "input:not([type='hidden']), select, textarea, button",
   "any": [],
   "all": [],
   "none": [
    "form-id-not-unique"
   ]
  },
  {
   "id": "image-active-alt",
   "enabled": false,
   "metadata": {
    "description": "Ensure that active image alts are meaningful",
    "help": "Active images (images inside anchor tags) must have a non-empty alt attribute",
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/active-image-alt?application=fireeyesFirefox"
   },
   "tags": [
    "section508",
    "section50.22.a"
   ],
   "selector": "a img",
   "any": [],
   "all": [],
   "none": [
    "invalid-active-image-alt-text"
   ]
  },
  {
   "id": "image-alt-meaningful",
   "enabled": false,
   "metadata": {
    "description": "Ensure that image alts are meaningful",
    "help": "When an alt is supplied, it must be meaningful (i.e. not a file name, size or meaningless value)",
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/meaningful-image-alt?application=fireeyesFirefox"
   },
   "tags": [
    "section508",
    "section50.22.a"
   ],
   "selector": "img",
   "all": [],
   "none": [
    "invalid-image-alt-text",
    "invalid-image-alt-filename",
    "invalid-ascii-art",
    "blank-alt"
   ]
  },
  {
   "id": "image-large-empty-alt",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/large-image-empty-alt?application=fireeyesFirefox",
    "description": "Ensures large images have a non-empty alt",
    "help": "Ensure that informational images (larger than your specified threshold) have a meaningful alt value"
   },
   "tags": [
    "section508",
    "section508.22.a"
   ],
   "selector": "img",
   "any": [],
   "all": [],
   "none": [
    "large-image-empty-alt"
   ],
   "matches": "function matches(node) {\n// not-child-of-anchor.js\nvar anchor = axe.commons.dom.findUp(node, 'a');\n\nreturn !anchor;\n}\n"
  },
  {
   "id": "image-li-alt",
   "enabled": true,
   "metadata": {
    "description": "Ensure that image alts in lists are meaningful",
    "help": "Alt-text for bullet image prohibited as per user's test settings",
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/image-li-alt?application=fireeyesFirefox"
   },
   "tags": [
    "section508",
    "section50.22.a"
   ],
   "selector": "li img",
   "any": [],
   "all": [],
   "none": [
    "invalid-image-li-alt-text"
   ],
   "matches": "function matches(node) {\n// not-child-of-anchor.js\nvar anchor = axe.commons.dom.findUp(node, 'a');\n\nreturn !anchor;\n}\n"
  },
  {
   "id": "image-long-alt",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/image-long-alt?application=fireeyesFirefox",
    "description": "Ensures image text equivalents are short or longdesc is used",
    "help": "When an alt is supplied, better to have it short (if needs to be long then use longdesc attribute instead)"
   },
   "tags": [
    "section508",
    "section508.22.a"
   ],
   "selector": "img",
   "any": [],
   "all": [],
   "none": [
    "image-long-alt"
   ]
  },
  {
   "id": "image-title-only",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/image-title-only?application=fireeyesFirefox",
    "description": "Ensures images do not only have a title attribute",
    "help": "This image needs an alt attribute, not just a title"
   },
   "tags": [
    "section508",
    "section508.22.a"
   ],
   "selector": "img[title]",
   "any": [
    "has-alt"
   ],
   "all": [],
   "none": []
  },
  {
   "id": "inactive-image-alt",
   "enabled": true,
   "metadata": {
    "description": "Ensure that inactive images have an alt",
    "help": "Images must have an alt attribute",
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/inactive-image-alt?application=fireeyesFirefox"
   },
   "tags": [
    "section508",
    "section50.22.a"
   ],
   "selector": "img",
   "any": [
    "has-alt"
   ],
   "all": [],
   "none": [],
   "matches": "function matches(node) {\n// not-child-of-anchor.js\nvar anchor = axe.commons.dom.findUp(node, 'a');\n\nreturn !anchor;\n}\n"
  },
  {
   "id": "input-image-alt-ascii",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/input-image-alt-ascii?application=fireeyesFirefox",
    "description": "Ensure that the alt attribute on input elements of type=\"image\" is not ASCII art",
    "help": "Suspicious text equivalent for button - could be ASCII art"
   },
   "tags": [
    "section508",
    "section508.22.a"
   ],
   "selector": "input[type='image']",
   "any": [],
   "all": [],
   "none": [
    "invalid-ascii-art"
   ]
  },
  {
   "id": "input-image-alt-meaningful",
   "enabled": true,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/input-image-alt-meaningful?application=fireeyesFirefox",
    "description": "Ensure that the alt attribute on input elements of type=\"image\" has a meaningful value",
    "help": "When an alt is supplied on button, it must be meaningful (i.e. not a file name, size or meaningless value)"
   },
   "tags": [
    "section508",
    "section508.22.a"
   ],
   "selector": "input[type='image']",
   "any": [],
   "all": [],
   "none": [
    "invalid-image-alt-text",
    "invalid-image-alt-filename"
   ]
  },
  {
   "id": "select-onchange",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/select-onchange?application=fireeyesFirefox",
    "description": "Raises a potential violation for <select> elements with an onchange that do not contain specific text to tell users what to expect",
    "help": "Check the <select> element to ensure it does not create a change of context without informing the user"
   },
   "tags": [
    "section508",
    "section508.22.n.potential"
   ],
   "selector": "select",
   "any": [
    "select-onchange"
   ],
   "all": [],
   "none": []
  },
  {
   "id": "smil-captions",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/smil-captions?application=fireeyesFirefox",
    "description": "Ensures <object> tags have a synchronized media file (SMIL)",
    "help": "<object> tags must have a synchronized media file (SMIL)"
   },
   "tags": [
    "section508",
    "section508.22.b"
   ],
   "selector": "object",
   "any": [
    "smil-captions"
   ],
   "all": [],
   "none": []
  },
  {
   "id": "va-skip-link",
   "enabled": false,
   "metadata": {
    "helpUrl": "https://dequeuniversity.com/rules/worldspace/2.0/va-skip-link?application=fireeyesFirefox",
    "description": "Raises a violation if no link can be found with the text 'skip ' that points to a valid in-page target",
    "help": "Create a link that allows a keyboard user to skip over repetitive navigation"
   },
   "tags": [
    "section508",
    "section508.22.o"
   ],
   "selector": "a",
   "pageLevel": true,
   "any": [
    "va-skip-link"
   ],
   "all": [],
   "none": []
  }
 ],
 "checks": [
  {
   "id": "accesskeys",
   "evaluate": "function evaluate(node, options) {\n        if (axe.commons.dom.isVisible(node, false)) {\n          this.data(node.getAttribute('accesskey'));\n          this.relatedNodes([ node ]);\n        }\n        return true;\n      }",
   "after": "function after(results, options) {\n        var seen = {};\n        return results.filter(function(r) {\n          if (!r.data) {\n            return false;\n          }\n          var key = r.data.toUpperCase();\n          if (!seen[key]) {\n            seen[key] = r;\n            r.relatedNodes = [];\n            return true;\n          }\n          seen[key].relatedNodes.push(r.relatedNodes[0]);\n          return false;\n        }).map(function(r) {\n          r.result = !!r.relatedNodes.length;\n          return r;\n        });\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-alt",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('alt');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-title",
   "evaluate": "function evaluate(node, options) {\n        var title = node.getAttribute('title');\n        return !!(title ? axe.commons.text.sanitize(title).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "aria-label",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('aria-label');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "aria-labelledby",
   "evaluate": "function evaluate(node, options) {\n        var getIdRefs = axe.commons.dom.idrefs;\n        return getIdRefs(node, 'aria-labelledby').some(function(elm) {\n          return elm && axe.commons.text.accessibleText(elm, true);\n        });\n      }",
   "enabled": true
  },
  {
   "id": "caption",
   "evaluate": "function evaluate(node, options) {\n        return !node.querySelector('track[kind=captions]');\n      }",
   "enabled": true
  },
  {
   "id": "is-on-screen",
   "evaluate": "function evaluate(node, options) {\n        // From a visual perspective\n        return axe.commons.dom.isVisible(node, false) && !axe.commons.dom.isOffscreen(node);\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-if-present",
   "evaluate": "function evaluate(node, options) {\n        // Check for 'default' names, which are given to reset and submit buttons\n        var nodeName = node.nodeName.toUpperCase();\n        var type = (node.getAttribute('type') || '').toLowerCase();\n        var label = node.getAttribute('value');\n        this.data(label);\n        if (nodeName === 'INPUT' && [ 'submit', 'reset' ].indexOf(type) !== -1) {\n          return label === null;\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "non-empty-value",
   "evaluate": "function evaluate(node, options) {\n        var label = node.getAttribute('value');\n        return !!(label ? axe.commons.text.sanitize(label).trim() : '');\n      }",
   "enabled": true
  },
  {
   "id": "button-has-visible-text",
   "evaluate": "function evaluate(node, options) {\n        var nodeName = node.nodeName.toUpperCase();\n        var role = node.getAttribute('role');\n        var label = void 0;\n        if (nodeName === 'BUTTON' || role === 'button' && nodeName !== 'INPUT') {\n          label = axe.commons.text.accessibleText(node);\n          this.data(label);\n          return !!label;\n        } else {\n          return false;\n        }\n      }",
   "enabled": true
  },
  {
   "id": "role-presentation",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('role') === 'presentation';\n      }",
   "enabled": true
  },
  {
   "id": "role-none",
   "evaluate": "function evaluate(node, options) {\n        return node.getAttribute('role') === 'none';\n      }",
   "enabled": true
  },
  {
   "id": "focusable-no-name",
   "evaluate": "function evaluate(node, options) {\n        var tabIndex = node.getAttribute('tabindex'), isFocusable = axe.commons.dom.isFocusable(node) && tabIndex > -1;\n        if (!isFocusable) {\n          return false;\n        }\n        return !axe.commons.text.accessibleText(node);\n      }",
   "enabled": true
  },
  {
   "id": "internal-link-present",
   "evaluate": "function evaluate(node, options) {\n        return !!node.querySelector('a[href^=\"#\"]');\n      }",
   "enabled": true
  },
  {
   "id": "header-present",
   "evaluate": "function evaluate(node, options) {\n        return !!node.querySelector('h1, h2, h3, h4, h5, h6, [role=\"heading\"]');\n      }",
   "enabled": true
  },
  {
   "id": "landmark",
   "evaluate": "function evaluate (node, options) { return node.getElementsByTagName('main').length > 0 || !!node.querySelector('[role=\"main\"]') ;}",
   "enabled": true
  },
  {
   "id": "has-alt",
   "evaluate": "function evaluate(node, options) {\n        return node.hasAttribute('alt');\n      }",
   "enabled": true
  },
  {
   "id": "implicit-label",
   "evaluate": "function evaluate(node, options) {\n        var label = axe.commons.dom.findUp(node, 'label');\n        if (label) {\n          return !!axe.commons.text.accessibleText(label);\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "explicit-label",
   "evaluate": "function evaluate(node, options) {\n        if (node.id) {\n          var label = document.querySelector('label[for=\"' + axe.commons.utils.escapeSelector(node.id) + '\"]');\n          if (label) {\n            return !!axe.commons.text.accessibleText(label);\n          }\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "help-same-as-label",
   "enabled": false,
   "evaluate": "function evaluate(node, options) {\n        var labelText = axe.commons.text.label(node), check = node.getAttribute('title');\n        if (!labelText) {\n          return false;\n        }\n        if (!check) {\n          check = '';\n          if (node.getAttribute('aria-describedby')) {\n            var ref = axe.commons.dom.idrefs(node, 'aria-describedby');\n            check = ref.map(function(thing) {\n              return thing ? axe.commons.text.accessibleText(thing) : '';\n            }).join('');\n          }\n        }\n        return axe.commons.text.sanitize(check) === axe.commons.text.sanitize(labelText);\n      }"
  },
  {
   "id": "multiple-label",
   "evaluate": "function evaluate(node, options) {\n        var labels = [].slice.call(document.querySelectorAll('label[for=\"' + axe.commons.utils.escapeSelector(node.id) + '\"]')), parent = node.parentNode;\n        while (parent) {\n          if (parent.tagName === 'LABEL' && labels.indexOf(parent) === -1) {\n            labels.push(parent);\n          }\n          parent = parent.parentNode;\n        }\n        this.relatedNodes(labels);\n        return labels.length > 1;\n      }",
   "enabled": true
  },
  {
   "id": "has-th",
   "evaluate": "function evaluate(node, options) {\n        var row, cell, badCells = [];\n        for (var rowIndex = 0, rowLength = node.rows.length; rowIndex < rowLength; rowIndex++) {\n          row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cell = row.cells[cellIndex];\n            if (cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1) {\n              badCells.push(cell);\n            }\n          }\n        }\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return true;\n        }\n        return false;\n      }",
   "enabled": true
  },
  {
   "id": "has-caption",
   "evaluate": "function evaluate(node, options) {\n        return !!node.caption;\n      }",
   "enabled": true
  },
  {
   "id": "has-summary",
   "evaluate": "function evaluate(node, options) {\n        return !!node.summary;\n      }",
   "enabled": true
  },
  {
   "id": "has-visible-text",
   "evaluate": "function evaluate(node, options) {\n        return axe.commons.text.accessibleText(node).length > 0;\n      }",
   "enabled": true
  },
  {
   "id": "exists",
   "evaluate": "function evaluate(node, options) {\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "same-caption-summary",
   "evaluate": "function evaluate(node, options) {\n        return !!(node.summary && node.caption) && node.summary === axe.commons.text.accessibleText(node.caption);\n      }",
   "enabled": true
  },
  {
   "id": "caption-faked",
   "evaluate": "function evaluate(node, options) {\n        var table = axe.commons.table.toGrid(node);\n        var firstRow = table[0];\n        if (table.length <= 1 || firstRow.length <= 1 || node.rows.length <= 1) {\n          return true;\n        }\n        return firstRow.reduce(function(out, curr, i) {\n          return out || curr !== firstRow[i + 1] && firstRow[i + 1] !== undefined;\n        }, false);\n      }",
   "enabled": true
  },
  {
   "id": "td-has-header",
   "evaluate": "function evaluate(node, options) {\n        var tableUtils = axe.commons.table;\n        var badCells = [];\n        var cells = tableUtils.getAllCells(node);\n        cells.forEach(function(cell) {\n          // For each non-empty data cell that doesn't have an aria label\n          if (cell.textContent.trim() !== '' && tableUtils.isDataCell(cell) && !axe.commons.aria.label(cell)) {\n            // Check if it has any headers\n            var hasHeaders = tableUtils.getHeaders(cell);\n            hasHeaders = hasHeaders.reduce(function(hasHeaders, header) {\n              return hasHeaders || header !== null && !!header.textContent.trim();\n            }, false);\n            // If no headers, put it on the naughty list\n            if (!hasHeaders) {\n              badCells.push(cell);\n            }\n          }\n        });\n        if (badCells.length) {\n          this.relatedNodes(badCells);\n          return false;\n        }\n        return true;\n      }",
   "enabled": true
  },
  {
   "id": "td-headers-attr",
   "evaluate": "function evaluate(node, options) {\n        var cells = [];\n        for (var rowIndex = 0, rowLength = node.rows.length; rowIndex < rowLength; rowIndex++) {\n          var row = node.rows[rowIndex];\n          for (var cellIndex = 0, cellLength = row.cells.length; cellIndex < cellLength; cellIndex++) {\n            cells.push(row.cells[cellIndex]);\n          }\n        }\n        var ids = cells.reduce(function(ids, cell) {\n          if (cell.id) {\n            ids.push(cell.id);\n          }\n          return ids;\n        }, []);\n        var badCells = cells.reduce(function(badCells, cell) {\n          var isSelf, notOfTable;\n          // Get a list all the values of the headers attribute\n          var headers = (cell.getAttribute('headers') || '').split(/\\s/).reduce(function(headers, header) {\n            header = header.trim();\n            if (header) {\n              headers.push(header);\n            }\n            return headers;\n          }, []);\n          if (headers.length !== 0) {\n            // Check if the cell's id is in this list\n            if (cell.id) {\n              isSelf = headers.indexOf(cell.id.trim()) !== -1;\n            }\n            // Check if the headers are of cells inside the table\n            notOfTable = headers.reduce(function(fail, header) {\n              return fail || ids.indexOf(header) === -1;\n            }, false);\n            if (isSelf || notOfTable) {\n              badCells.push(cell);\n            }\n          }\n          return badCells;\n        }, []);\n        if (badCells.length > 0) {\n          this.relatedNodes(badCells);\n          return false;\n        } else {\n          return true;\n        }\n      }",
   "enabled": true
  },
  {
   "id": "th-has-data-cells",
   "evaluate": "function evaluate(node, options) {\n        var tableUtils = axe.commons.table;\n        var cells = tableUtils.getAllCells(node);\n        var checkResult = this;\n        // Get a list of all headers reffed to in this rule\n        var reffedHeaders = [];\n        cells.forEach(function(cell) {\n          var headers = cell.getAttribute('headers');\n          if (headers) {\n            reffedHeaders = reffedHeaders.concat(headers.split(/\\s+/));\n          }\n          var ariaLabel = cell.getAttribute('aria-labelledby');\n          if (ariaLabel) {\n            reffedHeaders = reffedHeaders.concat(ariaLabel.split(/\\s+/));\n          }\n        });\n        // Get all the headers\n        var headers = cells.filter(function(cell) {\n          if (axe.commons.text.sanitize(cell.textContent) === '') {\n            return false;\n          }\n          return cell.nodeName.toUpperCase() === 'TH' || [ 'rowheader', 'columnheader' ].indexOf(cell.getAttribute('role')) !== -1;\n        });\n        var tableGrid = tableUtils.toGrid(node);\n        // Look for all the bad headers\n        return headers.reduce(function(res, header) {\n          if (header.id && reffedHeaders.indexOf(header.id) !== -1) {\n            return !res ? res : true;\n          }\n          var hasCell = false;\n          var pos = tableUtils.getCellPosition(header, tableGrid);\n          // Look for any data cells or row headers that this might refer to\n          if (tableUtils.isColumnHeader(header)) {\n            hasCell = tableUtils.traverse('down', pos, tableGrid).reduce(function(out, cell) {\n              return out || cell.textContent.trim() !== '' && !tableUtils.isColumnHeader(cell);\n            }, false);\n          }\n          // Look for any data cells or column headers that this might refer to\n          if (!hasCell && tableUtils.isRowHeader(header)) {\n            hasCell = tableUtils.traverse('right', pos, tableGrid).reduce(function(out, cell) {\n              return out || cell.textContent.trim() !== '' && !tableUtils.isRowHeader(cell);\n            }, false);\n          }\n          // report the node as having failed\n          if (!hasCell) {\n            checkResult.relatedNodes(header);\n          }\n          return res && hasCell;\n        }, true);\n      }",
   "enabled": true
  },
  {
   "id": "description",
   "evaluate": "function evaluate(node, options) {\n        return !node.querySelector('track[kind=descriptions]');\n      }",
   "enabled": true
  },
  {
   "id": "active-embed",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "<embed> elements that are not part of a media element or an <object> must be manually checked for captions",
     "fail": "<embed> elements that are not part of a media element or an <object> must be manually checked for captions"
    }
   },
   "evaluate": "function evaluate(node, options) {\nvar parents;\nfunction active_embed_get_parents(node) {\n\tvar parents = [];\n\tif (node.parentNode) {\n\t\tparents = active_embed_get_parents(node.parentNode);\n\t}\n\tparents.push(node.nodeName.toLowerCase());\n\treturn parents;\n}\nparents = active_embed_get_parents(node.parentNode);\nif (parents.indexOf('video') !== -1 || parents.indexOf('object') !== -1 ||\n\tparents.indexOf('audio') !== -1) {\n\treturn true; //pass\n}\nreturn false; //fail\n}\n"
  },
  {
   "id": "area-alt-unique",
   "enabled": true,
   "metadata": {
    "impact": "serious",
    "messages": {
     "pass": "All the alts wthin each map are unique",
     "fail": "One or more of the alts within the image map is duplicated"
    }
   },
   "evaluate": "function evaluate(node, options) {\n// unique-area-alt.js\nvar usemap = node.getAttribute('usemap');\nvar related = [];\nif (usemap) {\n\tvar map = document.querySelector('[name=\"' + usemap.substring(1) + '\"]');\n\tif (map) {\n\t\tvar areas = map.querySelectorAll('area');\n\t\tareas = Array.prototype.slice.call(areas);\n\t\tvar alts = {};\n\t\tareas.forEach(function (area) {\n\t\t\tvar text = axe.commons.text.accessibleText(area,\n\t\t\t\t\t\tarea.offsetHeight && area.offsetWidth).toLowerCase();\n\t\t\tif (typeof alts[text] === 'undefined') {\n\t\t\t\talts[text] = [area];\n\t\t\t} else {\n\t\t\t\talts[text].push(area);\n\t\t\t}\n\t\t});\n\t\tObject.keys(alts).forEach(function (key) {\n\t\t\tif (alts[key].length > 1) {\n\t\t\t\trelated = related.concat(alts[key]);\n\t\t\t}\n\t\t});\n\t\tif (related.length) {\n\t\t\tthis.relatedNodes(related);\n\t\t\treturn false; // fail\n\t\t}\n\t}\n}\nreturn true; // pass\n}\n"
  },
  {
   "id": "blank-alt",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "Ensures that the alt text is not all whitespace",
     "fail": "The alt text seems to consist only of whitespace, this is not allowed"
    }
   },
   "evaluate": "function evaluate(node, options) {\nvar alt = axe.commons.text.accessibleText(node).toLowerCase();\nif (node.nodeName === 'AREA' && alt === '' && node.offsetHeight && node.offsetWidth) {\n\t// visible AREA element, have to ignore hidden\n\talt = axe.commons.text.accessibleText(node, true).toLowerCase();\n}\nvar pass = !alt || (alt.length && (alt.replace(/\\r\\n/g, '\\n').replace(/\\u00A0/g, ' ').replace(/[\\s]{2,}/g, ' ').trim().length))\nreturn !pass;\n}\n"
  },
  {
   "id": "caption-not-empty",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "Ensures that the <caption> element in a data table is not empty",
     "fail": "The <caption> element on a data table must not be empty"
    }
   },
   "evaluate": "function evaluate(node, options) {\nvar text = axe.commons.text.accessibleText(node.caption);\nreturn (text && text.length);\n}\n"
  },
  {
   "id": "color-contrast-critical",
   "enabled": true,
   "metadata": {
    "impact": "serious",
    "messages": {
     "pass": "Element has a color contrast ratio greater than 4:1",
     "fail": "Element has a color contrast ratio of less than 4:1"
    }
   },
   "options": {
    "startThreshold": 4,
    "stopThreshold": 0
   },
   "evaluate": "function evaluate(node, options) {\nfunction matches (node) {\n\tvar nodeName = node.nodeName.toUpperCase(),\n\t\tnodeType = node.type,\n\t\tdoc = document;\n\n\tif (node.getAttribute('aria-disabled') === 'true') {\n\t\treturn false;\n\t}\n\n\tif (nodeName === 'INPUT') {\n\t\treturn ['hidden', 'range', 'color', 'checkbox', 'radio', 'image'].indexOf(nodeType) === -1 && !node.disabled;\n\t}\n\n\tif (nodeName === 'SELECT') {\n\t\treturn !!node.options.length && !node.disabled;\n\t}\n\n\tif (nodeName === 'TEXTAREA') {\n\t\treturn !node.disabled;\n\t}\n\n\tif (nodeName === 'OPTION') {\n\t\treturn false;\n\t}\n\n\tif (nodeName === 'BUTTON' && node.disabled) {\n\t\treturn false;\n\t}\n\n\t// check if the element is a label for a disabled control\n\tif (nodeName === 'LABEL') {\n\t\t// explicit label of disabled input\n\t\tvar candidate = node.htmlFor && doc.getElementById(node.htmlFor);\n\t\tif (candidate && candidate.disabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar candidate = node.querySelector('input:not([type=\"hidden\"]):not([type=\"image\"])' +\n\t\t\t':not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"]), select, textarea');\n\t\tif (candidate && candidate.disabled) {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t// label of disabled control associated w/ aria-labelledby\n\tif (node.id) {\n\t\tvar candidate = doc.querySelector('[aria-labelledby~=' + axe.commons.utils.escapeSelector(node.id) + ']');\n\t\tif (candidate && candidate.disabled) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (axe.commons.text.visible(node, false, true) === '') {\n\t\treturn false;\n\t}\n\n\tvar range = document.createRange(),\n\t\tchildNodes = node.childNodes,\n\t\tlength = childNodes.length,\n\t\tchild, index;\n\n\tfor (index = 0; index < length; index++) {\n\t\tchild = childNodes[index];\n\n\t\tif (child.nodeType === 3 && axe.commons.text.sanitize(child.nodeValue) !== '') {\n\t\t\trange.selectNodeContents(child);\n\t\t}\n\t}\n\n\tvar rects = range.getClientRects();\n\tlength = rects.length;\n\n\tfor (index = 0; index < length; index++) {\n\t\t//check to see if the rectangle impinges\n\t\tif (axe.commons.dom.visuallyOverlaps(rects[index], node)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nif (!matches(node) || !axe.commons.dom.isVisible(node, false)) {\n\treturn true;\n}\n\nvar noScroll = !!(options || {}).noScroll;\nvar bgNodes = [],\n\tbgColor = axe.commons.color.getBackgroundColor(node, bgNodes, noScroll),\n\tfgColor = axe.commons.color.getForegroundColor(node, noScroll);\n\n//We don't know, so we'll pass it provisionally\nif (fgColor === null || bgColor === null) {\n\treturn true;\n}\n\nvar nodeStyle = window.getComputedStyle(node);\nvar fontSize = parseFloat(nodeStyle.getPropertyValue('font-size'));\nvar fontWeight = nodeStyle.getPropertyValue('font-weight');\nvar bold = (['bold', 'bolder', '600', '700', '800', '900'].indexOf(fontWeight) !== -1);\n\nvar cr = axe.commons.color.hasValidContrastRatio(bgColor, fgColor, fontSize, bold);\nif (options && !cr.isValid &&\n\t(cr.contrastRatio < options.stopThreshold || cr.contrastRatio >= options.startThreshold)) {\n\tcr.isValid = true; // override using the thresholds supplied\n}\n\nthis.data({\n\tfgColor: fgColor.toHexString(),\n\tbgColor: bgColor.toHexString(),\n\tcontrastRatio: cr.contrastRatio.toFixed(2),\n\tfontSize: (fontSize * 72 / 96).toFixed(1) + 'pt',\n\tfontWeight: bold ? 'bold' : 'normal',\n});\n\nif (!cr.isValid) {\n\tthis.relatedNodes(bgNodes);\n}\nreturn cr.isValid;\n\n}\n"
  },
  {
   "id": "color-contrast-minor",
   "enabled": true,
   "metadata": {
    "impact": "minor",
    "messages": {
     "pass": "Element has a color contrast ratio greater than 4.5:1",
     "fail": "Element has a color contrast ratio of >= 4.0:1 and < 4.5:1, it must be at least 4.5:1"
    }
   },
   "options": {
    "startThreshold": 4.5,
    "stopThreshold": 4
   },
   "evaluate": "function evaluate(node, options) {\nfunction matches (node) {\n\tvar nodeName = node.nodeName.toUpperCase(),\n\t\tnodeType = node.type,\n\t\tdoc = document;\n\n\tif (node.getAttribute('aria-disabled') === 'true') {\n\t\treturn false;\n\t}\n\n\tif (nodeName === 'INPUT') {\n\t\treturn ['hidden', 'range', 'color', 'checkbox', 'radio', 'image'].indexOf(nodeType) === -1 && !node.disabled;\n\t}\n\n\tif (nodeName === 'SELECT') {\n\t\treturn !!node.options.length && !node.disabled;\n\t}\n\n\tif (nodeName === 'TEXTAREA') {\n\t\treturn !node.disabled;\n\t}\n\n\tif (nodeName === 'OPTION') {\n\t\treturn false;\n\t}\n\n\tif (nodeName === 'BUTTON' && node.disabled) {\n\t\treturn false;\n\t}\n\n\t// check if the element is a label for a disabled control\n\tif (nodeName === 'LABEL') {\n\t\t// explicit label of disabled input\n\t\tvar candidate = node.htmlFor && doc.getElementById(node.htmlFor);\n\t\tif (candidate && candidate.disabled) {\n\t\t\treturn false;\n\t\t}\n\n\t\tvar candidate = node.querySelector('input:not([type=\"hidden\"]):not([type=\"image\"])' +\n\t\t\t':not([type=\"button\"]):not([type=\"submit\"]):not([type=\"reset\"]), select, textarea');\n\t\tif (candidate && candidate.disabled) {\n\t\t\treturn false;\n\t\t}\n\n\t}\n\n\t// label of disabled control associated w/ aria-labelledby\n\tif (node.id) {\n\t\tvar candidate = doc.querySelector('[aria-labelledby~=' + axe.commons.utils.escapeSelector(node.id) + ']');\n\t\tif (candidate && candidate.disabled) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\tif (axe.commons.text.visible(node, false, true) === '') {\n\t\treturn false;\n\t}\n\n\tvar range = document.createRange(),\n\t\tchildNodes = node.childNodes,\n\t\tlength = childNodes.length,\n\t\tchild, index;\n\n\tfor (index = 0; index < length; index++) {\n\t\tchild = childNodes[index];\n\n\t\tif (child.nodeType === 3 && axe.commons.text.sanitize(child.nodeValue) !== '') {\n\t\t\trange.selectNodeContents(child);\n\t\t}\n\t}\n\n\tvar rects = range.getClientRects();\n\tlength = rects.length;\n\n\tfor (index = 0; index < length; index++) {\n\t\t//check to see if the rectangle impinges\n\t\tif (axe.commons.dom.visuallyOverlaps(rects[index], node)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nif (!matches(node) || !axe.commons.dom.isVisible(node, false)) {\n\treturn true;\n}\n\nvar noScroll = !!(options || {}).noScroll;\nvar bgNodes = [],\n\tbgColor = axe.commons.color.getBackgroundColor(node, bgNodes, noScroll),\n\tfgColor = axe.commons.color.getForegroundColor(node, noScroll);\n\n//We don't know, so we'll pass it provisionally\nif (fgColor === null || bgColor === null) {\n\treturn true;\n}\n\nvar nodeStyle = window.getComputedStyle(node);\nvar fontSize = parseFloat(nodeStyle.getPropertyValue('font-size'));\nvar fontWeight = nodeStyle.getPropertyValue('font-weight');\nvar bold = (['bold', 'bolder', '600', '700', '800', '900'].indexOf(fontWeight) !== -1);\n\nvar cr = axe.commons.color.hasValidContrastRatio(bgColor, fgColor, fontSize, bold);\nif (options && !cr.isValid &&\n\t(cr.contrastRatio < options.stopThreshold || cr.contrastRatio >= options.startThreshold)) {\n\tcr.isValid = true; // override using the thresholds supplied\n}\n\nthis.data({\n\tfgColor: fgColor.toHexString(),\n\tbgColor: bgColor.toHexString(),\n\tcontrastRatio: cr.contrastRatio.toFixed(2),\n\tfontSize: (fontSize * 72 / 96).toFixed(1) + 'pt',\n\tfontWeight: bold ? 'bold' : 'normal',\n});\n\nif (!cr.isValid) {\n\tthis.relatedNodes(bgNodes);\n}\nreturn cr.isValid;\n\n}\n"
  },
  {
   "id": "direct-audio-href",
   "enabled": true,
   "metadata": {
    "impact": "serious",
    "messages": {
     "pass": "Href appears to point to a valid file type",
     "fail": "Href appears to point to an audio file"
    }
   },
   "options": {
    "extensions": [
     "aif",
     "au",
     "dwd",
     "iff",
     "pcm",
     "sam",
     "smp",
     "snd",
     "svx",
     "vce",
     "voc",
     "wav",
     "aiff",
     "aifc",
     "ra",
     "ram",
     "rm",
     "rpm",
     "mid",
     "midi",
     "mod",
     "m3u",
     "mp3",
     "mp2",
     "mpa",
     "mpga",
     "sid",
     "cht",
     "dus",
     "es",
     "gsm",
     "gsd",
     "rmf",
     "stream",
     "tsi",
     "vox",
     "vqf",
     "vql",
     "wqe",
     "wma",
     "wtx"
    ]
   },
   "evaluate": "function evaluate(node, options) {\n\t// direct-audio-href\n\tvar href = node.href;\n\n\tvar dotIdx = href.lastIndexOf('.');\n\tif (dotIdx === -1) {\n\t\treturn false; //pass\n\t}\n\tvar ext = axe.commons.text.sanitize(href.substring(dotIdx+1));\n\tif (!ext) {\n\t\treturn false; //pass\n\t}\n\tif (options.extensions.indexOf(ext) === -1) {\n\t\treturn false; //pass\n\t}\n\n\tthis.data(ext);\n\treturn true; //fail\n\n}\n"
  },
  {
   "id": "direct-video-href",
   "enabled": true,
   "metadata": {
    "impact": "serious",
    "messages": {
     "pass": "Href appears to point to a valid file type",
     "fail": "Href appears to point to a media file"
    }
   },
   "options": {
    "extensions": [
     "avi",
     "movie",
     "movi",
     "mv",
     "mpeg",
     "mpg",
     "mpe",
     "qt",
     "mov",
     "wmv",
     "m4v",
     "wvx",
     "mp4",
     "webm",
     "flv",
     "vob",
     "ogg",
     "ogv",
     "gifv",
     "mng",
     "yuv",
     "rm",
     "rmvb",
     "asf",
     "m4p",
     "mp2",
     "mpv",
     "m2v",
     "3gp",
     "3g2",
     "mxf",
     "roq",
     "nsv",
     "f4v",
     "f4p",
     "f4a",
     "f4b"
    ]
   },
   "evaluate": "function evaluate(node, options) {\n\t// direct-audio-href\n\tvar href = node.href;\n\n\tvar dotIdx = href.lastIndexOf('.');\n\tif (dotIdx === -1) {\n\t\treturn false; //pass\n\t}\n\tvar ext = axe.commons.text.sanitize(href.substring(dotIdx+1));\n\tif (!ext) {\n\t\treturn false; //pass\n\t}\n\tif (options.extensions.indexOf(ext) === -1) {\n\t\treturn false; //pass\n\t}\n\n\tthis.data(ext);\n\treturn true; //fail\n\n}\n"
  },
  {
   "id": "explicit-fixed",
   "enabled": true,
   "metadata": {
    "impact": "critical",
    "messages": {
     "pass": "Form element has an explicit <label>",
     "fail": "Form element does not have an explicit <label>"
    }
   },
   "evaluate": "function evaluate(node, options) {\nif (!node.id) {\n\treturn false;\n}\nvar label = document.querySelector('label[for=\"' + axe.commons.utils.escapeSelector(node.id) + '\"]');\nif (label) {\n\treturn !!axe.commons.text.accessibleText(label);\n}\nreturn false;\n\n}\n"
  },
  {
   "id": "fieldset-legend-text",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "<fieldset>'s <legend> has non-empty text",
     "fail": "<fieldset>'s <legend> is empty or blank"
    }
   },
   "evaluate": "function evaluate(node, options) {\n// fieldset-legend-text.js\nvar childElement = node.firstElementChild;\nif (!childElement) {\n\treturn false; //pass\n}\nvar nodeName = childElement.nodeName.toLowerCase();\nif (nodeName === 'legend') {\n\tvar text = axe.commons.text.accessibleText(childElement);\n\treturn !text.length;\n}\nreturn false; // not a legend element\n}\n"
  },
  {
   "id": "fieldset-legend",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "<fieldset> element has a <legend> element as its first direct child",
     "fail": "<fieldset> element must have a <legend> as its first direct child"
    }
   },
   "evaluate": "function evaluate(node, options) {\n// fieldset-legend.js\nvar childElement = node.firstElementChild;\nif (!childElement) {\n\treturn true; //fail\n}\nvar nodeName = childElement.nodeName.toLowerCase();\nreturn nodeName !== 'legend';\n}\n"
  },
  {
   "id": "form-id-not-unique",
   "enabled": true,
   "metadata": {
    "impact": "critical",
    "messages": {
     "pass": "The element has a unique ID",
     "fail": "The element shares an ID with another element"
    }
   },
   "evaluate": "function evaluate(node, options) {\n// form-id-not-unique.js\nthis.data({id:node.id});\n}\n",
   "after": "function evaluate(node, options) {\n// form-id-not-unique-after.js\nvar results = arguments[0];\nvar idMap = {};\nresults.forEach(function (r) {\n\tif (!r.data || !r.data.id) return;\n\tif (typeof idMap[r.data.id] === 'undefined') {\n\t\tidMap[r.data.id] = r;\n\t} else {\n\t\tidMap[r.data.id].result = true;\n\t\tr.result = true;\n\t}\n});\nvar retVal = results.filter(function (r) {\n\treturn r.result;\n});\nreturn retVal;\n}\n"
  },
  {
   "id": "image-long-alt",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "The alt text has an appropriate length",
     "fail": "The alt text is too long, you should shorten it or use a longdesc"
    }
   },
   "options": {
    "maxLen": 150
   },
   "evaluate": "function evaluate(node, options) {\nvar imgAlt = axe.commons.text.sanitize(axe.commons.text.accessibleText(node).toLowerCase());\nreturn imgAlt.length > options.maxLen;\n}\n"
  },
  {
   "id": "invalid-active-image-alt-text",
   "enabled": true,
   "metadata": {
    "impact": "critical",
    "messages": {
     "pass": "Active image alt text cannt be empty",
     "fail": "The image alt text is empty"
    }
   },
   "evaluate": "function evaluate(node, options) {\n\tvar imgAlt = axe.commons.text.accessibleText(node).toLowerCase();\n\t// for active images, the alt cannot be empty\n\tif (!imgAlt || !imgAlt.length || imgAlt === ' ') {\n\t\treturn true; //fail\n\t}\n\treturn false;\n}\n"
  },
  {
   "id": "invalid-ascii-art",
   "enabled": true,
   "metadata": {
    "impact": "serious",
    "messages": {
     "pass": "Text does not appear to contain ascii art",
     "fail": "The accessible name contains what appears to be ascii art"
    }
   },
   "evaluate": "function evaluate(node, options) {\nfunction isAsciiArt(txt) {\n\t'use strict';\n\n\tvar i,\n\t\tlen = txt.length,\n\t\tocc = 0,\n\t\tprev = null;\n\n\tfor (i = 0; i < len; i++) {\n\t\tif (txt[i] === prev) {\n\t\t\tocc++;\n\t\t\tif (occ >= 5) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t} else {\n\t\t\tprev = txt[i];\n\t\t\tocc = 0;\n\t\t}\n\t}\n\treturn false;\n}\nvar text = axe.commons.text.accessibleText(node).toLowerCase();\nif (node.nodeName === 'AREA' && text === '' && node.offsetHeight && node.offsetWidth) {\n\t// visible AREA element, have to ignore hidden\n\ttext = axe.commons.text.accessibleText(node, true).toLowerCase();\n}\nconsole.log('ascii?: ' + text);\nreturn isAsciiArt(text);\n}\n"
  },
  {
   "id": "invalid-image-alt-filename",
   "enabled": true,
   "metadata": {
    "impact": "minor",
    "messages": {
     "pass": "Image alt text does not contain a file name",
     "fail": "The image alt text contains text that appears to be a file extension"
    }
   },
   "options": {
    "extensions": [
     "ai",
     "apng",
     "art",
     "bmp",
     "bpg",
     "bw",
     "cal",
     "cdf",
     "cdr",
     "cgm",
     "cin",
     "cpc",
     "cpt",
     "crw",
     "dds",
     "dib",
     "dng",
     "dpx",
     "dxf",
     "ecw",
     "emf",
     "emz",
     "eps",
     "epsf",
     "epsi",
     "eva",
     "exr",
     "ff",
     "fits",
     "flc",
     "fli",
     "flif",
     "fpx",
     "fts",
     "gbr",
     "gif",
     "git",
     "hdp",
     "hdr",
     "htm",
     "html",
     "icer",
     "icns",
     "ico",
     "ics",
     "ids",
     "iff",
     "int",
     "inta",
     "j2k",
     "jbg",
     "jbig",
     "jng",
     "jp2",
     "jpeg",
     "jpf",
     "jpg",
     "jpm",
     "jpx",
     "jxr",
     "lbm",
     "miff",
     "mng",
     "nrrd",
     "pam",
     "pbm",
     "pct",
     "pcx",
     "pdf",
     "pgf",
     "pgm",
     "pic",
     "pict",
     "png",
     "pnm",
     "ppm",
     "ps",
     "psb",
     "psd",
     "psp",
     "pspimage",
     "psptube",
     "qtvr",
     "ras",
     "rgb",
     "rgba",
     "sgi",
     "sun",
     "svg",
     "svgz",
     "swf",
     "tga",
     "tif",
     "tiff",
     "tub",
     "vmf",
     "vml",
     "wav",
     "wbmp",
     "wdp",
     "webp",
     "wmf",
     "wmz",
     "xaml",
     "xbm",
     "xcf",
     "xpm",
     "xwd"
    ]
   },
   "evaluate": "function evaluate(node, options) {\n\t// See the .JSON file for the most up-to-date, but invalid stuff is:\n\t//\n\t// if (typeof options === 'undefined') {\n\t// \toptions = {};\n\t// \toptions.extensions = [\n\t// \t\t'ai', 'apng', 'art', 'bmp', 'bpg', 'bw', 'cal', 'cdf', 'cdr', 'cgm', 'cin', 'cpc',\n\t// \t\t'cpt', 'crw', 'dds', 'dib', 'dng', 'dpx', 'dxf', 'ecw', 'emf', 'emz', 'eps', 'epsf',\n\t// \t\t'epsi', 'eva', 'exr', 'ff', 'fits', 'flc', 'fli', 'flif', 'fpx', 'fts', 'gbr', 'gif',\n\t// \t\t'git', 'hdp', 'hdr', 'htm', 'html', 'icer', 'icns', 'ico', 'ics', 'ids', 'iff', 'int',\n\t// \t\t'inta', 'j2k', 'jbg', 'jbig', 'jng', 'jp2', 'jpeg', 'jpf', 'jpg', 'jpm', 'jpx', 'jxr',\n\t// \t\t'lbm', 'miff', 'mng', 'nrrd', 'pam', 'pbm', 'pct', 'pcx', 'pdf', 'pgf', 'pgm', 'pic',\n\t// \t\t'pict', 'png', 'pnm', 'ppm', 'ps', 'psb', 'psd', 'psp', 'pspimage', 'psptube', 'qtvr',\n\t// \t\t'ras', 'rgb', 'rgba', 'sgi', 'sun', 'svg', 'svgz', 'swf', 'tga', 'tif', 'tiff', 'tub',\n\t// \t\t'vmf', 'vml', 'wav', 'wbmp', 'wdp', 'webp', 'wmf', 'wmz', 'xaml', 'xbm', 'xcf', 'xpm',\n\t// \t\t'xwd' ];\n\t// }\n\tvar imgAlt = axe.commons.text.accessibleText(node).toLowerCase();\n\tif (node.nodeName === 'AREA' && imgAlt === '' && node.offsetHeight && node.offsetWidth) {\n\t\t// visible AREA element, have to ignore hidden\n\t\timgAlt = axe.commons.text.accessibleText(node, true).toLowerCase();\n\t}\n\n\t/* Check for filename */\n\tvar dotIdx = imgAlt.lastIndexOf('.');\n\tif (dotIdx === -1) {\n\t\treturn false; //pass\n\t}\n\tvar ext = axe.commons.text.sanitize(imgAlt.substring(dotIdx+1));\n\tif (!ext) {\n\t\treturn false; //pass\n\t}\n\tif (options.extensions.indexOf(ext) === -1) {\n\t\treturn false; //pass\n\t}\n\n\tthis.data(ext);\n\treturn true; //fail\n\n}\n"
  },
  {
   "id": "invalid-image-alt-text",
   "enabled": true,
   "metadata": {
    "impact": "minor",
    "messages": {
     "pass": "Image alt text does not contain an invalid text",
     "fail": "The image alt text contains text that is on the list of invalid text alternatives"
    }
   },
   "options": {
    "invalid": [
     "image",
     "images",
     "spacer"
    ]
   },
   "evaluate": "function evaluate(node, options) {\n\t// See the .JSON file for the most up-to-date, but invalid stuff is:\n\t//\n\t// if (typeof options === 'undefined') {\n\t// \toptions = {};\n\t// \toptions.invalid = [\n\t// \t \t'image', 'images', 'spacer'\n\t// \t];\n\tvar imgAlt = axe.commons.text.accessibleText(node).toLowerCase();\n\tif (node.nodeName === 'AREA' && imgAlt === '' && node.offsetHeight && node.offsetWidth) {\n\t\t// visible AREA element, have to ignore hidden\n\t\timgAlt = axe.commons.text.accessibleText(node, true).toLowerCase();\n\t}\n\tif (imgAlt === ' ') {\n\t\treturn true; //fail\n\t}\n\t/* Check for invalid alts */\n\tif (options.invalid.indexOf(imgAlt) !== -1) {\n\t\tthis.data(options.invalid[options.invalid.indexOf(imgAlt)]);\n\t\treturn true; //fail\n\t}\n\treturn false;\n}\n"
  },
  {
   "id": "large-image-empty-alt",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "The alt text has an appropriate length",
     "fail": "The alt text for large images must not be empty"
    }
   },
   "options": {
    "threshold": 500
   },
   "evaluate": "function evaluate(node, options) {\nif (node.offsetWidth < options.threshold || node.offsetHeight < options.threshold) {\n\treturn false; //pass\n}\nvar imgAlt = axe.commons.text.sanitize(axe.commons.text.accessibleText(node).toLowerCase());\nreturn !imgAlt || imgAlt.length === 0;\n}\n"
  },
  {
   "id": "list-alt",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "The alt text for images inside a list seems appropriate",
     "fail": "The alt text for the image inside a list seems inappropriate"
    }
   },
   "options": {
    "invalid": [
     "star",
     "diamond",
     "arrow",
     "square",
     "bullet",
     "club",
     "circle",
     "eclipse"
    ]
   },
   "evaluate": "function evaluate(node, options) {\n\tvar imgAlt = axe.commons.text.accessibleText(node).toLowerCase();\n\t/* Check for invalid alts */\n\tif (options.invalid.indexOf(imgAlt) !== -1) {\n\t\tthis.data(options.invalid[options.invalid.indexOf(imgAlt)]);\n\t\treturn true; //fail\n\t}\n\treturn false;\n}\n"
  },
  {
   "id": "select-onchange",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "<select> element does not surprise users when changed",
     "fail": "<select> element may surprise users when changed"
    }
   },
   "options": {
    "passes": [
     "opens new",
     "opens in new",
     "move away",
     "go to"
    ]
   },
   "evaluate": "function evaluate(node, options) {\n// select-onchange.js\nif (!node.onchange) {\n\treturn true; //pass\n}\nvar label = axe.commons.text.accessibleText(node).toLowerCase();\nvar retVal = false;\nvar desc = node.getAttribute('aria-describedby');\nif (desc) {\n\tdesc.split(' ').forEach(function (id) {\n\t\tvar nd = document.getElementById(id);\n\t\tif (nd) {\n\t\t\tvar text = axe.commons.text.accessibleText(nd).toLowerCase();\n\t\t\tlabel = label + ' ' + text;\n\t\t}\n\t});\n} else {\n\tvar hint = node.getAttribute('title');\n\tif (hint) {\n\t\thint = hint.trim();\n\t\tif (!label.match(hint)) {\n\t\t\tlabel += ' ' + hint;\n\t\t}\n\t}\n}\noptions.passes.forEach(function (passText) {\n\tif (label.match(passText)) {\n\t\tretVal = true; // pass\n\t}\n});\nreturn retVal;\n}\n"
  },
  {
   "id": "smil-captions",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "<object> has a synchronized media file (SMIL)",
     "fail": "<object> tags need a synchronized media file (SMIL)"
    }
   },
   "options": {
    "extensions": [
     "smil"
    ]
   },
   "evaluate": "function evaluate(node, options) {\n// smil-captions.js\nfunction getSMILFile(node){\n\tvar classId = node.getAttribute('classid');\n\tvar mimeType = '';\n\tif (classId === null ) {\n\t\tmimeType = node.getAttribute('type');\n\t}\n\tif (mimeType === null) {\n\t\t//Object tag does not have CLASSID and TYPE attributes\n\t\treturn;\n\t}\n\tvar children = Array.prototype.slice.call(node.childNodes);\n\tvar retVal = false;\n\tchildren.forEach(function (child) {\n\t\tif (child.nodeName.toLowerCase() !== 'param') {\n\t\t\treturn;\n\t\t}\n\t\tvar name = child.getAttribute('name');\n\t\tname = name ? name.toLowerCase() : name;\n\t\tif (name && name === 'src') {\n\t\t\t// check extension\n\t\t\tvar value = child.getAttribute('value');\n\t\t\tvar dotIdx = value.lastIndexOf('.');\n\t\t\tif (dotIdx === -1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar ext = axe.commons.text.sanitize(value.substring(dotIdx+1));\n\t\t\tif (!ext) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (options.extensions.indexOf(ext) !== -1) {\n\t\t\t\tretVal = true;\n\t\t\t}\n\t\t}\n\t});\n\treturn retVal;\n}\n\nreturn getSMILFile(node);\n}\n"
  },
  {
   "id": "va-skip-link",
   "enabled": true,
   "metadata": {
    "impact": "moderate",
    "messages": {
     "pass": "The page has a link to skip repetitive navigation",
     "fail": "The page does not have a link to skip repetitive navigation"
    }
   },
   "evaluate": "function evaluate(node, options) {\n// name attribute not allowed also does not have to be the first link\n// on the page\n\n// This check is a data-gathering check that should be used in a\n// pageLevel rule only\n\nvar capture = {\n\tskipTextFound: false,\n\tfragmentFound: false\n};\n\nvar linkText = axe.commons.text.accessibleText(node).toLowerCase();\nif (linkText) {\n\tcapture.skipTextFound = !!linkText.match('skip ');\n\tif (capture.skipTextFound) {\n\t\tvar href = node.getAttribute('href');\n\t\tif (href && href.charAt(0) === '#') {\n\t\t\tvar target = document.getElementById(href.substring(1));\n\t\t\tcapture.fragmentFound = !!target;\n\t\t}\n\t}\n}\nthis.data(capture);\n\n}\n",
   "after": "function evaluate(node, options) {\n/*\n * Process the data collected by the skip link data capture\n */\nvar results = arguments[0];\nvar found = results.filter(function (r) {\n\treturn r.data.skipTextFound && r.data.fragmentFound;\n});\n\nif (found.length) {\n\treturn []; //pass\n} else {\n\treturn results.splice(0, 1); // return the first link\n}\n\n}\n"
  }
 ],
 "data": {
  "rules": {
   "accesskeys": {
    "description": "Ensures every accesskey attribute value is unique",
    "help": "accesskey attribute value must be unique"
   },
   "area-alt": {
    "description": "Ensures <area> elements of image maps have alternate text",
    "help": "Active <area> elements must have alternate text",
    "mapping": {
     "ruleId": "010109-A",
     "SC": "1.1.1",
     "weight": 3,
     "description": "Missing text equivalent for area."
    }
   },
   "audio-caption": {
    "description": "Ensures <audio> elements have captions",
    "help": "<audio> elements must have a captions track",
    "mapping": {
     "ruleId": "010402-D",
     "SC": "1.2.2",
     "weight": 0,
     "description": "Checks the use of all <audio> element to ensure that the element contains a <caption> element"
    }
   },
   "blink": {
    "description": "Ensures <blink> elements are not used",
    "help": "<blink> elements are deprecated and must not be used",
    "mapping": {
     "ruleId": "070201-A",
     "SC": "2.2.2",
     "weight": 0,
     "description": "Checks to make sure that the <blink> tag is never used"
    }
   },
   "button-name": {
    "description": "Ensures buttons have discernible text",
    "help": "Buttons must have discernible text",
    "mapping": {
     "ruleId": "SC412BTN",
     "SC": "1.1.1",
     "weight": 3,
     "description": "Checks all <button> elements to ensure that they have a discernable accessible name"
    }
   },
   "bypass": {
    "description": "Ensures each page has at least one mechanism for a user to bypass navigation and jump straight to the content",
    "help": "Page must have means to bypass repeated blocks",
    "mapping": {
     "ruleId": "N130601-A",
     "SC": "2.4.1",
     "weight": 3,
     "description": "There is no mechanism to bypass navigation links."
    }
   },
   "frame-title": {
    "description": "Ensures <iframe> and <frame> elements contain a non-empty title attribute",
    "help": "Frames must have title attribute",
    "mapping": {
     "ruleId": "120101-A",
     "SC": "4.1.2",
     "weight": 2,
     "description": "Ensure that all iframe and frame elements contain a unique and non-empty title attribute"
    }
   },
   "image-alt": {
    "description": "Ensures <img> elements have alternate text or a role of none or presentation",
    "help": "Images must have alternate text",
    "mapping": {
     "ruleId": "IMG_NO_ALT",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <img> element has an alternative text or is marked as presentational"
    }
   },
   "input-image-alt": {
    "description": "Ensures <input type=\"image\"> elements have alternate text",
    "help": "Image buttons must have alternate text",
    "mapping": {
     "ruleId": "010103-A",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <input> that represents an image button has an accessible name"
    }
   },
   "label": {
    "description": "Ensures every form element has a label",
    "help": "Form elements must have labels",
    "mapping": {
     "ruleId": "120401-E",
     "SC": "1.3.1",
     "weight": 0,
     "description": "Ensures that every input element that requires a label, has an appropriate label"
    }
   },
   "layout-table": {
    "description": "Ensures presentational <table> elements do not use <th>, <caption> elements or the summary attribute",
    "help": "Layout tables must not use data table elements",
    "mapping": {
     "ruleId": "050401-A",
     "SC": "1.3.1",
     "weight": 1,
     "description": "Ensures that <table> elements that are being used for layout do not contain markup only relevant for data tables"
    }
   },
   "link-name": {
    "description": "Ensures links have discernible text",
    "help": "Links must have discernible text",
    "mapping": {
     "ruleId": "SC412LNKN",
     "SC": "4.1.2",
     "weight": 1,
     "description": "Ensures that every link has an accessible name"
    }
   },
   "object-alt": {
    "description": "Ensures <object> elements have alternate text",
    "help": "<object> elements must have alternate text",
    "mapping": {
     "ruleId": "010105-A",
     "SC": "1.1.1",
     "weight": 0,
     "description": "Ensures that every <object> element has a text alternative"
    }
   },
   "server-side-image-map": {
    "description": "Ensures that server-side image maps are not used",
    "help": "Server-side image maps must not be used",
    "mapping": {
     "ruleId": "090101-A",
     "SC": "2.1.1",
     "weight": 0,
     "description": "Ensures that server-side image maps are never used"
    }
   },
   "table-duplicate-name": {
    "description": "Ensure that tables do not have the same summary and caption",
    "help": "The <caption> element should not contain the same text as the summary attribute",
    "mapping": {}
   },
   "table-fake-caption": {
    "description": "Ensure that tables with a caption use the <caption> element.",
    "help": "Data or header cells should not be used to give caption to a data table.",
    "mapping": {}
   },
   "td-has-header": {
    "description": "Ensure that each non-empty data cell in a large table has one or more table headers",
    "help": "All non-empty td element in table larger than 3 by 3 must have an associated table header",
    "mapping": {}
   },
   "td-headers-attr": {
    "description": "Ensure that each cell in a table using the headers refers to another cell in that table",
    "help": "All cells in a table element that use the headers attribute must only refer to other cells of that same table"
   },
   "th-has-data-cells": {
    "description": "Ensure that each table header in a data table refers to data cells",
    "help": "All th element and elements with role=columnheader/rowheader must data cells which it describes",
    "mapping": {}
   },
   "video-caption": {
    "description": "Ensures <video> elements have captions",
    "help": "<video> elements must have captions",
    "mapping": {
     "ruleId": "010402-D",
     "SC": "1.2.2",
     "weight": 1,
     "description": "Ensures that the HTML5 <video> tag is captioned"
    }
   },
   "video-description": {
    "description": "Ensures <video> elements have audio descriptions",
    "help": "<video> elements must have an audio description track",
    "mapping": {
     "ruleId": "010301-Q1",
     "SC": "1.2.5",
     "weight": 1,
     "description": "Ensures that every <video> tag has an audio description"
    }
   }
  },
  "checks": {
   "accesskeys": {
    "impact": "critical"
   },
   "non-empty-alt": {
    "impact": "critical"
   },
   "non-empty-title": {
    "impact": "critical"
   },
   "aria-label": {
    "impact": "critical"
   },
   "aria-labelledby": {
    "impact": "critical"
   },
   "caption": {
    "impact": "critical"
   },
   "is-on-screen": {
    "impact": "minor"
   },
   "non-empty-if-present": {
    "impact": "critical"
   },
   "non-empty-value": {
    "impact": "critical"
   },
   "button-has-visible-text": {
    "impact": "critical"
   },
   "role-presentation": {
    "impact": "moderate"
   },
   "role-none": {
    "impact": "moderate"
   },
   "focusable-no-name": {
    "impact": "serious"
   },
   "internal-link-present": {
    "impact": "critical"
   },
   "header-present": {
    "impact": "moderate"
   },
   "landmark": {
    "impact": "serious"
   },
   "has-alt": {
    "impact": "critical"
   },
   "implicit-label": {
    "impact": "critical"
   },
   "explicit-label": {
    "impact": "critical"
   },
   "help-same-as-label": {
    "impact": "minor"
   },
   "multiple-label": {
    "impact": "serious"
   },
   "has-th": {
    "impact": "serious"
   },
   "has-caption": {
    "impact": "serious"
   },
   "has-summary": {
    "impact": "serious"
   },
   "has-visible-text": {
    "impact": "critical"
   },
   "exists": {
    "impact": "minor"
   },
   "same-caption-summary": {
    "impact": "moderate"
   },
   "caption-faked": {
    "impact": "critical"
   },
   "td-has-header": {
    "impact": "critical"
   },
   "td-headers-attr": {
    "impact": "serious"
   },
   "th-has-data-cells": {
    "impact": "critical"
   },
   "description": {
    "impact": "serious"
   }
  }
 }
}